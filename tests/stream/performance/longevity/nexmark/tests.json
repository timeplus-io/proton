{
    "comments":
        "Tests covering the steam query smoke cases.",
    "test_suite_config": {
        "proton_ci_mode": "local",
        "table_schemas":[

            {
                "name": "auction",
                "type": "table",
                "reset": "False",
                "query_parameters":"logstore_retention_ms=3600000",
                "config": "setting_1",
                "columns": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "initialBid",
                        "type": "string"
                    },
                    {
                        "name": "itemName",
                        "type": "string"
                    },
                    {
                        "name": "reserve",
                        "type": "string"
                    },
                    {
                        "name": "seller",
                        "type": "string"
                    },
                    {
                        "name": "category",
                        "type": "string"
                    },
                    {
                        "name": "dateTime",
                        "type": "datetime64(3)"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "expires",
                        "type": "datetime64(3)"
                    },                                                                                                                                            
                    {
                        "name": "extra",
                        "type": "string"
                    },                                                                                                                                                                                                                                              
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3, 'Asia/Shanghai')",
                        "default": "now64(3, 'Asia/Shanghai')"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"
            },
           
            {
                "name": "bid",
                "type": "table",
                "reset": "False",
                "query_parameters":"logstore_retention_ms=3600000",
                "config": "setting_1",
                "columns": [
                    {
                        "name": "auction",
                        "type": "string"
                    },
                    {
                        "name": "bidder",
                        "type": "string"
                    },
                    {
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "name": "price",
                        "type": "float"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "dateTime",
                        "type": "datetime64(3)"
                    },                                                                                                                                            
                    {
                        "name": "extra",
                        "type": "string"
                    },                                                                                                                                                                                                                                              
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3, 'Asia/Shanghai')",
                        "default": "now64(3, 'Asia/Shanghai')"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"
            },            
            {
                "name": "person",
                "type": "table",
                "reset": "False",
                "query_parameters":"logstore_retention_ms=3600000",
                "config": "setting_1",
                "columns": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "type": "string"
                    },
                    {
                        "name": "city",
                        "type": "float"
                    },
                    {
                        "name": "creditCard",
                        "type": "string"
                    },
                    {
                        "name": "dateTime",
                        "type": "datetime64(3)"
                    },
                    {
                        "name": "emailAddress",
                        "type": "string"
                    },                                                                                                                                                                 
                    {
                        "name": "extra",
                        "type": "string"
                    },                                                                                                                                                                                                                                              
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3, 'Asia/Shanghai')",
                        "default": "now64(3, 'Asia/Shanghai')"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"
            }                                                                       


        ],
        "setup": {

        },
        "tests_2_run": {"ids_2_run": [8], "tags_2_run":[], "tags_2_skip":["bug", "todo", "to_support"]} 
    },

    "tests": [        

        {
            "id": 8,
            "tags": ["debug"],
            "name": "longevity - proton, with query time easy json volume, 80 streams",
            "description": "tail query latency w/single source",
            "db_engine":"proton",
            "input_info_table": "input_info",
            "steps":[
                {"statements": [
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop view if exists nexmark_hot_v$"},                    
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop stream if exists auction_$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop stream if exists bid_$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop stream if exists person_$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop stream if exists AuctionBids_$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop stream if exists CountBids_$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"create stream if not exists auction_$ (id string, initialBid string, itemName string, reserve string, seller string, category string, dateTime datetime64(3), description string, expires datetime64(3), extra string, perf_event_time datetime64(3) default now64(3), _perf_row_id string, _perf_ingest_time string) TTL to_datetime(_tp_time) + INTERVAL 24 HOUR SETTINGS logstore_retention_bytes = '21474836480', logstore_retention_ms = '00000';"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"create stream if not exists bid_$ (auction string, bidder string, channel string, price float, url string, dateTime datetime64(3), extra string, perf_event_time datetime64(3) default now64(3), _perf_row_id string, _perf_ingest_time string) TTL to_datetime(_tp_time) + INTERVAL 24 HOUR SETTINGS logstore_retention_bytes = '21474836480', logstore_retention_ms = '00000';"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"create stream if not exists person_$(id string, name string, state string, city string, creditCard string, dateTime datetime64(3), emailAddress string, extra string, perf_event_time datetime64(3) default now64(3), _perf_row_id string, _perf_ingest_time string) TTL to_datetime(_tp_time) + INTERVAL 24 HOUR SETTINGS logstore_retention_bytes = '21474836480', logstore_retention_ms = '00000';"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"create view if not exists AuctionBids_$ as (SELECT auction, count(*) AS num, window_start as ws, window_end as we FROM hop(bid_$, 2s, 10s) where _tp_time > now() -1h GROUP BY auction, ws, we)"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"create view if not exists CountBids_$ AS (SELECT count(*) AS num, window_start AS ws, window_end AS we FROM hop(bid_$, 2s, 10s) where _tp_time > now() -1h GROUP BY auction, ws, we)"},
                    {"client":"python","config_set": "setting_1", "wait":20, "interval":2, "workers": 2, "query_type": "table", "query":"create materialized view if not exists nexmark_hot_v$ as (WITH MaxBids AS (SELECT max(num) AS maxn, ws, we FROM CountBids_$ GROUP BY ws, we) SELECT a.auction, a.num FROM AuctionBids_$ AS a INNER JOIN MaxBids AS b ON (a.ws = b.ws) AND (a.we = b.we) WHERE a.num >= b.maxn)"},
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"nexmark_hot_v$", "query_id":501, "run_mode":"process", "loop_times": 1, "workers": 2, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from nexmark_hot_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"nexmark_hot_v$", "query_id":502, "run_mode":"process", "loop_times": 1, "workers": 2, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"SELECT Q.seller, array_avg([Q.final] || lags(Q.final, 1, 9, 0)) OVER (PARTITION BY Q.seller) FROM (with bid_$_seek_to as (select * from bid_$ where _tp_time > now() -1h) select max(B.price) AS final, A.seller, B.dateTime FROM auction_$ as A join bid_$_seek_to as B on A.id = B.auction where B.dateTime between A.dateTime and A.expires and _tp_time > now() -1h GROUP BY A.id, A.seller, B.dateTime) AS Q;", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"}



                ]},
                    

                {"inputs": [
                    {"table_name": "auction_$","input_id": 511,"table_schema_ref":"auction", "client":"rest", "workers":2, "data_source":"file", "data_set_path":"nexmark", "data_set_file": "auction_sample.csv", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 100, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "bid_$","input_id": 512,"table_schema_ref":"bid", "client":"rest", "workers":2, "data_source":"file", "data_set_path":"nexmark", "data_set_file": "bid_sample.csv", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 100, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "person_$","input_id": 513,"table_schema_ref":"person", "client":"rest", "workers":2, "data_source":"file", "data_set_path":"nexmark", "data_set_file": "person_sample.csv", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 100, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"}


                ]}

            ]               
        } 
    ]
}


