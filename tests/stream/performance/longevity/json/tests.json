{
    "comments":
        "Tests covering the steam query smoke cases.",
    "test_suite_config": {
        "proton_ci_mode": "local",
        "table_schemas":[
            {
                "name": "event",
                "type": "table",
                "reset": "False",
                "config": "setting_1",
                "query_parameters":"logstore_retention_ms=3600000",
                "columns": [
                    {
                        "name": "event",
                        "type": "json"
                    },
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3)",
                        "default": "now64(3)"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"
            },
            {
                "name": "event_1",
                "type": "table",
                "reset": "False",
                "config": "setting_1",
                "query_parameters":"logstore_retention_ms=3600000",
                "columns": [
                    {
                        "name": "event",
                        "type": "json"
                    },
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3)",
                        "default": "now64(3)"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"
            },            
            {
                "name": "event_s",
                "type": "table",
                "reset": "False",
                "config": "setting_1",
		        "query_parameters":"logstore_retention_ms=3600000",
                "columns": [
                    {
                        "name": "json_string",
                        "type": "string"
                    },
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3)",
                        "default": "now64(3)"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }                    
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"    
            },
            {
                "name": "event_s1",
                "type": "table",
                "reset": "False",
		        "query_parameters":"logstore_retention_ms=3600000",
                "config": "setting_1",
                "columns": [
                    {
                        "name": "json_string",
                        "type": "string"
                    },
                    {
                        "name": "perf_event_time",
                        "type": "datetime64(3)",
                        "default": "now64(3)"
                    },                      
                    {
                        "name": "_perf_row_id",
                        "type": "string"
                    },                  
                    {
                        "name": "_perf_ingest_time",
                        "type": "string"
                    }                    
                ],
                "ttl_expression": "to_datetime(_tp_time) + INTERVAL 1 HOUR"
            }


        ],
        "setup": {
            "statements":[
                {"client":"python","config_set": "setting_1","workers": 1, "interval":1, "query_type": "table", "query":"insert into event(event) values('{\"id\": \"21562085809\", \"type\": \"PushEvent\", \"actor\": {\"id\": 75677395, \"login\": \"malviyaindia\", \"display_login\": \"malviyaindia\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/malviyaindia\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/75677395?\"}, \"repo\": {\"id\": 385258641, \"name\": \"malviyaindiaiom\", \"url\": \"https://api.github.com/repos/malviyaindia/iom\"}, \"payload\": {\"push_id\": 9766550002, \"size\": 1, \"distinct_size\": 1, \"ref\": \"refs/heads/main\", \"head\": \"22d8895aee80067947304e63a4fc4007b73ff0cb\", \"before\": \"d82e4899e4682e65af392d38abd0368a2c242842\", \"commits\": [{\"sha\": \"22d8895aee80067947304e63a4fc4007b73ff0cb\", \"author\": {\"email\": \"75677395+malviyaindia@users.noreply.github.com\", \"name\": \"Atul Malviya\"}, \"message\": \"Update index.html\", \"distinct\": true, \"url\": \"https://api.github.com/repos/malviyaindia/iom/commits/22d8895aee80067947304e63a4fc4007b73ff0cb\"}]}, \"public\": true, \"created_at\": \"2022-05-01T10:10:13Z\"}')"},
                {"client":"python","config_set": "setting_1","workers": 1, "interval":1, "query_type": "table", "query":"insert into event_1(event) values('{\"id\": \"21562085809\", \"type\": \"PushEvent\", \"actor\": {\"id\": 75677395, \"login\": \"malviyaindia\", \"display_login\": \"malviyaindia\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/malviyaindia\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/75677395?\"}, \"repo\": {\"id\": 385258641, \"name\": \"malviyaindiaiom\", \"url\": \"https://api.github.com/repos/malviyaindia/iom\"}, \"payload\": {\"push_id\": 9766550002, \"size\": 1, \"distinct_size\": 1, \"ref\": \"refs/heads/main\", \"head\": \"22d8895aee80067947304e63a4fc4007b73ff0cb\", \"before\": \"d82e4899e4682e65af392d38abd0368a2c242842\", \"commits\": [{\"sha\": \"22d8895aee80067947304e63a4fc4007b73ff0cb\", \"author\": {\"email\": \"75677395+malviyaindia@users.noreply.github.com\", \"name\": \"Atul Malviya\"}, \"message\": \"Update index.html\", \"distinct\": true, \"url\": \"https://api.github.com/repos/malviyaindia/iom/commits/22d8895aee80067947304e63a4fc4007b73ff0cb\"}]}, \"public\": true, \"created_at\": \"2022-05-01T10:10:13Z\"}')"}                
            ]
        },
        "tests_2_run": {"ids_2_run": [8], "tags_2_run":[], "tags_2_skip":["bug", "todo", "to_support"]} 
    },

    "tests": [
        {
            "id": 4,
            "tags": ["latency"],
            "name": "longevity - proton, with easy json obj large volume",
            "description": "tail query latency w/single source",
            "db_engine":"proton",
            "input_info_table": "input_info",
            "steps":[
                {"statements": [
                    {"client":"python","config_set": "setting_1","workers": 80, "interval":1, "query_type": "table", "query":"drop view if exists event_json_tumble_count_v$"},                    
                    {"client":"python","config_set": "setting_1", "wait":20, "interval":5, "workers": 80, "query_type": "table", "query":"create materialized view event_json_tumble_count_v$ as select window_start as ws, window_end as we, event.type, count() from tumble(event, 5s) group by event.type, window_start, window_end"},
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"event_s_tumble_count_v$", "query_id":"702", "run_mode":"process", "loop_times": 1, "workers": 80, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_json_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"}                    

                ]},
                    

                {"inputs": [
                    {"table_name": "event","input_id": 203, "workers":50, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "event", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":5, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"}

                ]}

            ]               
        },         
        {
            "id": 6,
            "tags": ["8 debug"],
            "name": "longevity - proton, with query time easy json volume, 80 streams",
            "description": "tail query latency w/single source",
            "db_engine":"proton",
            "input_info_table": "input_info",
            "steps":[
                {"statements": [
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop view if exists event_s_tumble_count_v$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop view if exists event_json_tumble_count_v$"},
                    {"client":"python","config_set": "setting_1","workers": 2, "interval":1, "query_type": "table", "query":"drop view if exists event_1_json_tumble_count_v$"},                    
                    {"client":"python","config_set": "setting_1", "wait":1, "interval":5, "workers": 2, "query_type": "table", "query":"create materialized view event_json_tumble_count_v$ as select window_start as ws, window_end as we, event.type, count() from tumble(event, 5s) group by event.type, window_start, window_end"},
                    {"client":"python","config_set": "setting_1", "wait":1, "interval":5, "workers": 2, "query_type": "table", "query":"create materialized view event_1_json_tumble_count_v$ as select window_start as ws, window_end as we, event.type, count() from tumble(event_1, 5s) group by event.type, window_start, window_end"},                    
                    {"client":"python","config_set": "setting_1", "wait": 2, "interval":1, "depends_on_stream":"event_json_tumble_count_v$", "query_id":"701", "run_mode":"process", "loop_times": 1, "workers": 2, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_json_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},
                    {"client":"python","config_set": "setting_1", "wait": 2, "interval":1, "depends_on_stream":"event_json_tumble_count_v$", "query_id":"702", "run_mode":"process", "loop_times": 1, "workers": 2, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_1_json_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},                                                                          
                    {"client":"python","config_set": "setting_1", "wait":1, "interval":5, "workers": 1, "query_type": "table", "query":"create materialized view event_s_tumble_count_v$ as select window_start as ws, window_end as we, json_string:repo.name as repo_name, count() from tumble(event_s, 5s) group by repo_name, window_start, window_end"},
                    {"client":"python","config_set": "setting_1", "wait": 1, "interval":1, "depends_on_stream":"event_s_tumble_count_v$", "query_id":"703", "run_mode":"process", "loop_times": 1, "workers": 1, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_s_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},                    
                    {"client":"python", "config_set": "setting_1", "wait": 1, "query_id": 704, "run_mode":"process", "loop_times": 1, "workers": 1, "query_type": "stream", "terminate":"auto", "query_end_timer": 30, "query":"select a.json_string:id as a_id, to_time(a.json_string:created_at) as a_created_at, a.json_string:payload.pull_request.head.repo.owner.id as a_repo_owner_id, b.json_string:id as b_id, to_time(b.json_string:created_at) as b_created_at, b.json_string:payload.pull_request.head.repo.owner.id as b_repo_owner_id, date_diff('second', a._tp_time, b._tp_time) from event_s as a join event_s1 as b on a_id = b_id and date_diff_within(10s, a._tp_time, b._tp_time) where to_int64(a_id) > 0", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},
                    {"client":"python", "config_set": "setting_1", "wait": 1, "query_id": 705, "run_mode":"process", "loop_times": 1, "workers": 1, "query_type": "stream", "terminate":"auto", "query_end_timer": 30, "query":"select a.json_string:id as a_id, to_time(a.json_string:created_at) as a_created_at, a.json_string:payload.pull_request.head.repo.owner.id as a_repo_owner_id, b.json_string:id as b_id, to_time(b.json_string:created_at) as b_created_at, b.json_string:payload.pull_request.head.repo.owner.id as b_repo_owner_id, date_diff('second', a._tp_time, b._tp_time) from event_s as a join event_s1 as b on a_id = b_id and date_diff_within(10s, a._tp_time, b._tp_time) where to_int64(a_id) > 0", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"}

                ]},
                    

                {"inputs": [
                    {"table_name": "event_s","input_id": 714, "table_schema_ref":"event_s", "workers":1, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "json_string", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event_s1","input_id": 715, "table_schema_ref":"event_s1", "workers":1, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "json_string", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event","input_id": 716, "workers":2, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "event", "table_schema_file":"table_schema.json -todo", 
                    "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":5, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event_1","input_id": 717, "workers":2, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "event", "table_schema_file":"table_schema.json -todo", 
                    "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":5, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"}                                                                       

                ]}

            ]               
        },  

        {
            "id": 8,
            "tags": ["8 debug"],
            "name": "longevity - proton, with query time easy json volume, 80 streams",
            "description": "tail query latency w/single source",
            "db_engine":"proton",
            "input_info_table": "input_info",
            "steps":[
                {"statements": [
                    {"client":"python","config_set": "setting_1","workers": 40, "interval":1, "query_type": "table", "query":"drop view if exists event_s_tumble_count_v$"},
                    {"client":"python","config_set": "setting_1","workers": 20, "interval":1, "query_type": "table", "query":"drop view if exists event_json_tumble_count_v$"},
                    {"client":"python","config_set": "setting_1","workers": 20, "interval":1, "query_type": "table", "query":"drop view if exists event_1_json_tumble_count_v$"},                    
                    {"client":"python","config_set": "setting_1", "wait":10, "interval":5, "workers": 20, "query_type": "table", "query":"create materialized view event_json_tumble_count_v$ as select window_start as ws, window_end as we, event.type, count() from tumble(event, 5s) group by event.type, window_start, window_end"},
                    {"client":"python","config_set": "setting_1", "wait":10, "interval":5, "workers": 20, "query_type": "table", "query":"create materialized view event_1_json_tumble_count_v$ as select window_start as ws, window_end as we, event.type, count() from tumble(event_1, 5s) group by event.type, window_start, window_end"},                    
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"event_json_tumble_count_v$", "query_id":"701", "run_mode":"process", "loop_times": 1, "workers": 20, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_json_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"event_json_tumble_count_v$", "query_id":"702", "run_mode":"process", "loop_times": 1, "workers": 20, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_1_json_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},                                                                          
                    {"client":"python","config_set": "setting_1", "wait":10, "interval":5, "workers": 40, "query_type": "table", "query":"create materialized view event_s_tumble_count_v$ as select window_start as ws, window_end as we, json_string:repo.name as repo_name, count() from tumble(event_s, 5s) group by repo_name, window_start, window_end"},
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"event_s_tumble_count_v$", "query_id":"703", "run_mode":"process", "loop_times": 1, "workers": 40, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_s_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},                    
                    {"client":"python", "config_set": "setting_1", "wait": 1, "query_id": 704, "run_mode":"process", "loop_times": 1, "workers": 1, "query_type": "stream", "terminate":"auto", "query_end_timer": 30, "query":"select a.json_string:id as a_id, to_time(a.json_string:created_at) as a_created_at, a.json_string:payload.pull_request.head.repo.owner.id as a_repo_owner_id, b.json_string:id as b_id, to_time(b.json_string:created_at) as b_created_at, b.json_string:payload.pull_request.head.repo.owner.id as b_repo_owner_id, date_diff('second', a._tp_time, b._tp_time) from event_s as a join event_s1 as b on a_id = b_id and date_diff_within(10s, a._tp_time, b._tp_time) where to_int64(a_id) > 0", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},
                    {"client":"python", "config_set": "setting_1", "wait": 1, "query_id": 705, "run_mode":"process", "loop_times": 1, "workers": 1, "query_type": "stream", "terminate":"auto", "query_end_timer": 30, "query":"select a.json_string:id as a_id, to_time(a.json_string:created_at) as a_created_at, a.json_string:payload.pull_request.head.repo.owner.id as a_repo_owner_id, b.json_string:id as b_id, to_time(b.json_string:created_at) as b_created_at, b.json_string:payload.pull_request.head.repo.owner.id as b_repo_owner_id, date_diff('second', a._tp_time, b._tp_time) from event_s as a join event_s1 as b on a_id = b_id and date_diff_within(10s, a._tp_time, b._tp_time) where to_int64(a_id) > 0", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"}

                ]},
                    

                {"inputs": [
                    {"table_name": "event_s","input_id": 714, "table_schema_ref":"event_s", "workers":1, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "json_string", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event_s1","input_id": 715, "table_schema_ref":"event_s1", "workers":1, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "json_string", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event","input_id": 716,"table_schema_ref":"event", "workers":10, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "event", "table_schema_file":"table_schema.json -todo", 
                    "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":5, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event_1","input_id": 717,"table_schema_ref":"event_1", "workers":10, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "event", "table_schema_file":"table_schema.json -todo", 
                    "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":5, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"}                                                                       

                ]}

            ]               
        },        
        
        {
            "id": 9,
            "tags": ["latency"],
            "name": "longevity - proton, with query time easy json volume, 80 streams",
            "description": "tail query latency w/single source",
            "db_engine":"proton",
            "input_info_table": "input_info",
            "steps":[
                {"statements": [
                    {"client":"python","config_set": "setting_1","workers": 80, "interval":1, "query_type": "table", "query":"drop view if exists event_s_tumble_count_v$"},
                    {"client":"python","config_set": "setting_1", "wait":20, "interval":5, "workers": 80, "query_type": "table", "query":"create materialized view event_s_tumble_count_v$ as select window_start as ws, window_end as we, json_string:repo.name as repo_name, count() from tumble(event_s, 5s) group by repo_name, window_start, window_end"},
                    {"client":"python","config_set": "setting_1", "wait": 10, "interval":1, "depends_on_stream":"event_s_tumble_count_v$", "query_id":"702", "run_mode":"process", "loop_times": 1, "workers": 80, "query_type": "stream", "terminate":"auto","query_end_timer": 30, "query":"select * from event_s_tumble_count_v$", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},                    
                    {"client":"python", "config_set": "setting_1", "wait": 1, "query_id": 703, "run_mode":"process", "loop_times": 1, "workers": 20, "query_type": "stream", "terminate":"auto", "query_end_timer": 30, "query":"select a.json_string:id as a_id, to_time(a.json_string:created_at) as a_created_at, a.json_string:payload.pull_request.head.repo.owner.id as a_repo_owner_id, b.json_string:id as b_id, to_time(b.json_string:created_at) as b_created_at, b.json_string:payload.pull_request.head.repo.owner.id as b_repo_owner_id, date_diff('second', a._tp_time, b._tp_time) from event_s as a join event_s1 as b on a_id = b_id and date_diff_within(10s, a._tp_time, b._tp_time) where to_int64(a_id) > 0", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"},
                    {"client":"python", "config_set": "setting_1", "wait": 1, "query_id": 704, "run_mode":"process", "loop_times": 1, "workers": 20, "query_type": "stream", "terminate":"auto", "query_end_timer": 30, "query":"select a.json_string:id as a_id, to_time(a.json_string:created_at) as a_created_at, a.json_string:payload.pull_request.head.repo.owner.id as a_repo_owner_id, b.json_string:id as b_id, to_time(b.json_string:created_at) as b_created_at, b.json_string:payload.pull_request.head.repo.owner.id as b_repo_owner_id, date_diff('second', a._tp_time, b._tp_time) from event_s as a join event_s1 as b on a_id = b_id and date_diff_within(10s, a._tp_time, b._tp_time) where to_int64(a_id) > 0", "result_keep":"False", "query_result_table":"query_result_03", "query_record_table":"query_record_01"}

                ]},
                    

                {"inputs": [
                    {"table_name": "event_s","input_id": 714, "table_schema_ref":"event_s", "workers":1, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "json_string", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"},
                    {"table_name": "event_s1","input_id": 715, "table_schema_ref":"event_s1", "workers":1, "data_source":"file", "data_set_path":"event", "data_set_file": "event_github.json", "data_set_file_format": "json", "json_column": "json_string", "table_schema_file":"table_schema.json -todo", 
                        "ingest_interval":1,"interval_model":"random - todo", "time_incre_interval":0.5, "data_set_play_mode":"sequence", "rows_2_play": 1000, "batch_size":1, "loop_times":-1, "result_keep":"False","input_record_table":"input_record"}                           

                ]}

            ]               
        }

    ]               
}                                      


