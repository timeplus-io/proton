test_suite_name: changelog_stream7
tag: smoke
test_suite_config:
  setup:
    statements:
      - client: python
        query_type: table
        wait: 2
        query: DROP VIEW IF EXISTS test14_view2_7;

      - client: python
        query_type: table
        wait: 2
        query: DROP VIEW IF EXISTS test14_view1_7;

      - client: python
        query_type: table
        wait: 2
        query: DROP VIEW IF EXISTS test14_view_7;

  tests_2_run:
    ids_2_run:
      - all
    tags_2_run: []
    tags_2_skip:
      default:
        - todo
        - to_support
        - change
        - bug
        - sample
      cluster:
        - view
        - cluster_table_bug
comments: Tests covering the single shard changelog stream query smoke cases.
tests:
  - id: 36
    tags:
      - subquery/view/materialized_view/
      - tumble(table)
      - group_by
      - primary_key
      - todo
    name: global aggregation, partition by no primary key, group by primary key, UDA
    description: global aggregation, partition by no primary key, group by primary key, UDA
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000002'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_substream_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_7(val float, types string, id int, name string);

          - client: python
            query_id: '1436'
            depends_on_stream: test14_substream_7
            query_end_timer: 12
            query_type: stream
            query: select sec_large(val), max(val), min(val), avg(val), name from changelog(test14_substream_7, id) partition by name group by id;

          - client: python
            query_type: table
            depends_on: '1436'
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (1, 'c', 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (3, 'b', 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (5, 'a', 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (8, 'c', 12, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (9, 'b', 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, name) values (11, 'a', 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (10, 'c', 1, 'c');

          - client: python
            query_type: table
            kill: '1436'
            kill_wait: 2
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (14, 'b', 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_substream_7;

  - id: 37
    tags:
      - subquery/view/materialized_view/
      - tumble(table)
      - group_by
      - primary_key
    name: global aggregation,  partition by no primary key, group by no primary key, UDA
    description: global aggregation,  partition by no primary key, group by no primary key, UDA
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_substream_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_7(val float, types string, id int, name string);

          - client: python
            query_id: '1437'
            depends_on_stream: test14_substream_7
            query_end_timer: 12
            query_type: stream
            query: select max(val), min(val), avg(val), name from changelog(test14_substream_7, id) partition by name group by types;

          - client: python
            query_type: table
            depends_on: '1437'
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (1, 'c', 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (3, 'b', 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (5, 'a', 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (8, 'c', 12, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (9, 'b', 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (11, 'a', 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (10, 'c', 1, 'c');

          - client: python
            query_type: table
            kill: '1437'
            kill_wait: 2
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (14, 'b', 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_substream_7;

    expected_results:
      - query_id: '1437'
        expected_results:
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [5, 5, 5, 'c']
          - [8, 1, 4.5, 'a']
          - [9, 9, 9, 'b']
          - [9, 9, 9, 'b']
          - [11, 11, 11, 'b']
          - [8, 8, 8, 'a']
          - [0, 0, nan, 'c']
          - [10, 10, 10, 'c']
          - [14, 9, 11.5, 'b']
          - [0, 0, nan, 'b']

  - id: 38
    tags:
      - subquery/view/materialized_view/
      - tumble(table)
      - group_by
      - primary_key
      - todo
    name: global aggregation,  partition by no primary key, no group by , UDA, statefule function
    description: global aggregation,  partition by no primary key, no group by , UDA, statefule function
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000002'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_substream_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_7(val float, types string, id int, name string);

          - client: python
            query_id: '1438'
            depends_on_stream: test14_substream_7
            query_end_timer: 12
            query_type: stream
            query: |
              select sec_large(val), max(val), min(val), avg(val), name from changelog(test14_substream_7, id)
              partition by name group by types;

          - client: python
            query_type: table
            depends_on: '1438'
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (1, 'c', 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (3, 'b', 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (5, 'a', 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (8, 'c', 12, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (9, 'b', 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (11, 'a', 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (10, 'c', 1, 'c');

          - client: python
            query_type: table
            kill: '1438'
            kill_wait: 2
            wait: 2
            query: insert into test14_substream_7(val, types, id, name) values (14, 'b', 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_substream_7;

  - id: 39
    tags:
      - subquery/view/materialized_view/
      - tumble(table)
      - group_by
      - primary_key
      - to_support
    name: versioned_kv window aggreagtion (tumble window) group by promary key(not_implemented)
    description: versioned_kv window aggreagtion (tumble window) group by promary key(not_implemented)
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_stream;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_stream(val float, id int, name string, ts datetime) primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1439'
            depends_on_stream: test14_substream_7
            query_end_timer: 12
            query_type: stream
            query: select max(val), min(val), avg(val), count(*), sum(val), window_start from tumble(test14_stream, ts, 5s) group by window_start;

          - client: python
            query_type: table
            depends_on: '1439'
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (1, 2, 'a', '2020-02-02 20:00:01');

          - client: python
            query_type: table
            depends_on: '1439'
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (3, 3, 'b', '2020-02-02 20:00:02');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (4, 3, 'b', '2020-02-02 20:00:03');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (0, 2, 'a', '2020-02-02 20:00:03');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (5, 1, 'c', '2020-02-02 20:00:04');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (8, 2, 'a', '2020-02-02 20:00:06');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (9, 3, 'b', '2020-02-02 20:00:07');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (11, 2, 'b', '2020-02-02 20:00:08');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (10, 1, 'c', '2020-02-02 20:00:09');

          - client: python
            query_type: table
            kill: '1439'
            kill_wait: 2
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (14, 2, 'b', '2020-02-02 20:00:20');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_stream;

  - id: 40
    tags:
      - subquery/view/materialized_view/
      - tumble(table)
      - group_by
      - primary_key
      - todo
    name: versioned_kv window aggreagtion (hop window) group by promary key(not_implemented)
    description: versioned_kv window aggreagtion (hop window) group by promary key(not_implemented)
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_stream;

          - client: python
            query_type: table
            wait: 2
            query: |
              create stream if not exists test14_stream(val float, id int, name string, ts datetime)
              primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1440'
            depends_on_stream: test14_substream_7
            query_end_timer: 12
            query_type: stream
            query: |
              select max(val), min(val), avg(val), count(*), sum(val), window_start from hop(test14_stream, ts, 2s, 5s)
              group by window_start;

          - client: python
            query_type: table
            depends_on: '1440'
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (1, 2, 'a', '2020-02-02 20:00:01');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (3, 3, 'b', '2020-02-02 20:00:02');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (4, 3, 'b', '2020-02-02 20:00:03');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (0, 2, 'a', '2020-02-02 20:00:03');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (5, 1, 'c', '2020-02-02 20:00:04');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (8, 2, 'a', '2020-02-02 20:00:06');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (9, 3, 'b', '2020-02-02 20:00:07');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (11, 2, 'b', '2020-02-02 20:00:08');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (10, 1, 'c', '2020-02-02 20:00:09');

          - client: python
            query_type: table
            kill: '1440'
            kill_wait: 2
            wait: 2
            query: insert into test14_stream(val, id, name, ts) values (14, 2, 'b', '2020-02-02 20:00:20');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_stream;

  - id: 41
    tags:
      - versioned_kv_subquery/view/materialized_view
      - streaming_tailing
    name: subquery from view from subquery
    description: subquery from view from subquery
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000001'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_7(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view_7 as (with cte as (select i, k1, k2 from test14_subquery_7) select * from cte);

          - client: python
            query_id: '1441'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: select i, k1, k2, lag(i, 2), upper(k2), add_five(i) from test14_view_7;

          - client: python
            query_type: table
            depends_on: '1441'
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1441'
            kill_wait: 2
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

    expected_results:
      - query_id: '1441'
        expected_results:
          - [1, 2, 'a', 0, 'A', 6]
          - [3, 3, 'b', 0, 'B', 8]
          - [5, 1, 'c', 1, 'C', 10]
          - [8, 2, 'a', 3, 'A', 13]
          - [9, 3, 'b', 5, 'B', 14]
          - [11, 2, 'b', 8, 'B', 16]
          - [10, 1, 'c', 9, 'C', 15]
          - [14, 2, 'b', 11, 'B', 19]

  - id: 42
    tags:
      - versioned_kv_subquery/view/materialized_view
      - streaming_tailing
    name: subquery from materialized view from subquery
    description: subquery from materialized view from subquery
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000001'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_7(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: |
              create materialized view if not exists test14_view_7 as (
                with cte as (select i, k1, k2 from test14_subquery_7)
                select i, k1, k2 from cte
              );

          - client: python
            query_id: '1442'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: select i, k1, k2, lag(i, 2), upper(k2), add_five(i) from test14_view_7;

          - client: python
            query_type: table
            depends_on: '1442'
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1442'
            kill_wait: 2
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

    expected_results:
      - query_id: '1442'
        expected_results:
          - [1, 2, 'a', 0, 'A', 6]
          - [3, 3, 'b', 0, 'B', 8]
          - [5, 1, 'c', 1, 'C', 10]
          - [8, 2, 'a', 3, 'A', 13]
          - [9, 3, 'b', 5, 'B', 14]
          - [11, 2, 'b', 8, 'B', 16]
          - [10, 1, 'c', 9, 'C', 15]
          - [14, 2, 'b', 11, 'B', 19]

  - id: 43
    tags:
      - versioned_kv_subquery/view/materialized_view
      - streaming_tailing
    name: subquery from view from view
    description: subquery from view from view
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000001'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view2_7;

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view1_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 2
            query: |
              create stream if not exists test14_subquery_7(i float, k1 int, k2 string)
              primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view1_7 as (select i, k1, k2, _tp_delta from test14_subquery_7);

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view2_7 as (select * from test14_view1_7);

          - client: python
            query_id: '1443'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: select i, k1, k2, lag(i, 2), upper(k2), add_five(i) from test14_view2_7;

          - client: python
            query_type: table
            depends_on: '1443'
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1443'
            kill_wait: 2
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop view if exists test14_view2_7;

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view1_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

    expected_results:
      - query_id: '1443'
        expected_results:
          - [1, 2, 'a', 0, 'A', 6]
          - [3, 3, 'b', 0, 'B', 8]
          - [5, 1, 'c', 1, 'C', 10]
          - [8, 2, 'a', 3, 'A', 13]
          - [9, 3, 'b', 5, 'B', 14]
          - [11, 2, 'b', 8, 'B', 16]
          - [10, 1, 'c', 9, 'C', 15]
          - [14, 2, 'b', 11, 'B', 19]

  - id: 44
    tags:
      - versioned_kv_subquery/view/materialized_view
      - streaming_tailing
    name: subqury from subquery from subquery
    description: subqury from subquery from subquery
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000001'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_7(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_id: '1444'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: |
              with cte1 as (with cte2 as (select i, k1, k2, _tp_delta from test14_subquery_7) select * from cte2)
              select i, k1, k2, lag(i, 2), upper(k2), add_five(i) from cte1;

          - client: python
            query_type: table
            depends_on: '1444'
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1444'
            kill_wait: 3
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_subquery_7;

    expected_results:
      - query_id: '1444'
        expected_results:
          - [1, 2, 'a', 0, 'A', 6]
          - [3, 3, 'b', 0, 'B', 8]
          - [5, 1, 'c', 1, 'C', 10]
          - [8, 2, 'a', 3, 'A', 13]
          - [9, 3, 'b', 5, 'B', 14]
          - [11, 2, 'b', 8, 'B', 16]
          - [10, 1, 'c', 9, 'C', 15]
          - [14, 2, 'b', 11, 'B', 19]

  - id: 45
    tags:
      - versioned_kv_subquery/view/materialized_view
      - streaming_tailing
    name: subquery from materlized view from view
    description: subquery from materlized view from view
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_id: '10000001'
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view2_7;

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view1_7;

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 2
            query: |
              create stream if not exists test14_subquery_7(i float, k1 int, k2 string)
              primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view1_7 as (select i, k1, k2 from test14_subquery_7);

          - client: python
            query_type: table
            wait: 2
            query: create materialized view if not exists test14_view2_7 as (select i, k1, k2 from test14_view1_7);

          - client: python
            query_id: '1445'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: select i, k1, k2, lag(i, 2), upper(k2), add_five(i) from test14_view2_7;

          - client: python
            query_type: table
            depends_on: '1445'
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1445'
            kill_wait: 3
            wait: 2
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop view if exists test14_view2_7;

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view1_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

    expected_results:
      - query_id: '1445'
        expected_results:
          - [1, 2, 'a', 0, 'A', 6]
          - [3, 3, 'b', 0, 'B', 8]
          - [5, 1, 'c', 1, 'C', 10]
          - [8, 2, 'a', 3, 'A', 13]
          - [9, 3, 'b', 5, 'B', 14]
          - [11, 2, 'b', 8, 'B', 16]
          - [10, 1, 'c', 9, 'C', 15]
          - [14, 2, 'b', 11, 'B', 19]

  - id: 46
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: subquery from view from subquery
    description: subquery from view from subquery
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_7(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view_7 as (with cte as (select i, k1, k2 from test14_subquery_7) select * from cte);

          - client: python
            query_id: '1446'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: select max(i), min(i), avg(i), k2 from test14_view_7 group by k2 emit periodic 1s;

          - client: python
            query_type: table
            depends_on: '1446'
            wait: 1
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a') (3, 3, 'b') (5, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a')(9, 3, 'b')(11, 2, 'b')(10, 1, 'c');

          - client: python
            query_type: table
            kill: '1446'
            kill_wait: 2
            wait: 1
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

    expected_results:
      - query_id: '1446'
        expected_results:
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [5, 5, 5, 'c']
          - [8, 8, 8, 'a']
          - [11, 11, 11, 'b']
          - [10, 10, 10, 'c']
          - [8, 8, 8, 'a']
          - [14, 14, 14, 'b']
          - [10, 10, 10, 'c']

  - id: 47
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: subquery from materialized view from subquery, bug
    description: subquery from materialized view from subquery, bug
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_target_changelog_kv_7;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_7(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 0
            query: create stream if not exists test14_target_changelog_kv_7(i float, k1 int, k2 string) primary key k2 settings mode='changelog_kv';

          - client: python
            query_type: table
            wait: 2
            query: |
              create materialized view if not exists test14_view_7 into test14_target_changelog_kv_7 as (
                with cte as (select i, k1, k2 from test14_subquery_7)
                select i, k1, k2, _tp_delta from cte emit changelog
              );

          - client: python
            query_id: '1447'
            depends_on_stream: test14_subquery_7
            query_end_timer: 12
            query_type: stream
            query: select max(i), min(i), avg(i), k2 from test14_view_7 group by k2 emit periodic 1s;

          - client: python
            query_type: table
            depends_on: '1447'
            wait: 1
            query: insert into test14_subquery_7(i, k1, k2) values (1, 2, 'a') (3, 3, 'b') (5, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_7(i, k1, k2) values (8, 2, 'a')(9, 3, 'b')(11, 2, 'b')(10, 1, 'c');

          - client: python
            query_type: table
            kill: '1447'
            kill_wait: 2
            wait: 1
            query: insert into test14_subquery_7(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: drop view if exists test14_view_7;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_7;
  
          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_target_changelog_kv_7;

    expected_results:
      - query_id: '1447'
        expected_results:
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [5, 5, 5, 'c']
          - [8, 8, 8, 'a']
          - [11, 11, 11, 'b']
          - [10, 10, 10, 'c']
          - [8, 8, 8, 'a']
          - [14, 14, 14, 'b']
          - [10, 10, 10, 'c']

