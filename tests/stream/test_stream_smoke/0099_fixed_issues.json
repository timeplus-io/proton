{
  "test_suite_name": "fixed_issues",
  "tag": "smoke",

  "test_suite_config":{
    "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
  },
  "comments": "Tests covering fixed issues smoke cases.",
  "tests": [
    {
      "id": 0,
      "tags": ["materialized view"],
      "name": "#1288",
      "description": "create materialized view over materialized view with last emit",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists mv_2"},
            {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists mv_1"},
            {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists mv_truck_track"},
            {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists ttp_truck_track"},
            {"client":"python", "query_type": "table", "wait":2, "query_id":"9900", "query": "create stream ttp_truck_track(`lpn` string, `vno` string, `drc` string, `drcCode` int32, `wgs84Lat` float32, `wgs84Lon` float32, `gcj02Lat` float32, `gcj02Lon` float32, `province` nullable(string), `city` nullable(string), `country` nullable(string), `spd` float32, `mil` float32, `time` string, `adr` string)"},
            {"client":"python", "query_type": "table", "wait":5, "query_id":"9901","depends_on_stream":"ttp_truck_track", "query": "create materialized view mv_truck_track as (select * from ttp_truck_track where date_diff('second', _tp_time, now()) < 30)"},
            {"client":"python", "query_type": "table", "wait":5, "query_id":"9902", "depends_on_stream":"mv_truck_track", "query": "create materialized view if not exists mv_1 as (select now() as time, count_distinct(lpn) as cnt from mv_truck_track emit last 10m and periodic 10s)"},
            {"client":"python", "query_type": "table", "wait":5, "query_id":"9903", "depends_on_stream":"mv_truck_track","drop_view":"mv_2,mv_1,mv_truck_track", "drop_view_wait":2, "query": "create materialized view if not exists mv_2 as (select now() as time, count_distinct(lpn) as cnt from mv_truck_track emit last 10m and periodic 10s)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]},
        {"query_id":"9901", "expected_results":[]},
        {"query_id":"9902", "expected_results":[]},
        {"query_id":"9903", "expected_results":[]}
      ]
    },
    {
      "id": 1,
      "tags": ["substream"],
      "name": "#1295",
      "description": "substream watermark and garbage collection",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists test_substream_1"},
            {"client":"python", "query_type": "table", "wait":2, "query":"create stream test_substream_1(i int, s string)"},
            {"client":"python", "query_id":"9900", "terminate": "manual", "query_type": "stream", "depends_on_stream":"test_substream_1", "query":"select s, count(*), max(i) from tumble(test_substream_1, 2s) partition by s group by window_start, s"},
            {"client":"python", "query_type": "table", "depends_on": 9900, "wait":2, "query": "insert into test_substream_1(i, s) values (1, 'a'), (2, 'b')"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_substream_1(i, s) values (1, 'a'), (2, 'b')"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_substream_1(i, s) values (1, 'a'), (2, 'b')"},
            {"client":"python", "wait": 2, "run_mode":"table", "query_type": "table", "query":"kill query where query_id = '9900'"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          ["a", 1, 1],
          ["b", 1, 2],
          ["a", 1, 1],
          ["b", 1, 2]
        ]}
      ]
    },
    {
      "id": 2,
      "tags": ["substream"],
      "name": "#1395",
      "description": "rewrited aggregate function with substream",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists test_substream_1"},
            {"client":"python", "query_type": "table", "wait":5, "query":"create stream test_substream_1(id int, value int)"},
            {"client":"python", "query_id":"9900", "terminate": "manual", "query_type": "stream", "wait":1, "depends_on_stream":"test_substream_1", "query":"select id, min_k(value, 1), max_k(value, 1), top_k(value, 1) from test_substream_1 partition by id order by id limit 2"},
            {"client":"python", "query_type": "table", "depends_on": 9900,"wait":2, "query": "insert into test_substream_1(id, value) values (1, 1), (2, 2), (2, 1), (1, 2), (2, 1), (1, 2)"},
            {"client":"python", "query_type": "table", "query_id":"9901", "wait":2, "query":"select id, min_k(value, 1), max_k(value, 1), top_k(value, 1) from table(test_substream_1) partition by id group by id order by id"},
            {"client":"python", "wait": 5, "run_mode":"table", "query_type": "table", "query":"kill query where query_id = '9900'"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, "[1]", "[2]", "[(2, 2)]"],
          [2, "[1]", "[2]", "[(1, 2)]"]
        ]},
        {"query_id":"9901", "expected_results":[
          [1, "[1]", "[2]", "[(2, 2)]"],
          [2, "[1]", "[2]", "[(1, 2)]"]
        ]}
      ]
    },
    {
      "id": 3,
      "tags": ["rename"],
      "name": "#1445",
      "description": "[parser] fix rename function failure(example: maxIf to max_if)",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_rename_fail_stream"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_rename_fail_stream(student_name string, subject string, score int)"},
            {"client":"python", "query_type": "table", "wait":2, "query": "insert into test_rename_fail_stream(student_name, subject, score) values ('Marc','Math', 60),('Marc','Science', 70),('Marcus', 'Math', 80),('Marcus', 'Science', 90)"},
            {"client":"python", "query_type": "table", "query_id":"9900", "wait":2, "query":"select max(score) filter(where subject = 'Math')as  max_math_score, avg(score) filter (where subject = 'Science') as avg_science_score from table(test_rename_fail_stream)"},
            {"client":"python", "query_type": "table", "query_id":"9901", "wait":2, "query":"select min(score) filter(where subject = 'Math')as  min_math_score, sum(score) filter (where subject = 'Science') as sum_science_score from table(test_rename_fail_stream)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          ["80", "80.0"]
        ]},
        {"query_id":"9901", "expected_results":[
          ["60", "160"]
        ]}
      ]
    },
    {
      "id": 4,
      "tags": ["count_if(*)"],
      "name": "#1476",
      "description": "fix count_if function with argument *",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists count_if_with_AsteriskArguement"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream count_if_with_AsteriskArguement(age int,name string)"},
            {"client":"python", "query_type": "table", "wait":2, "query": "insert into count_if_with_AsteriskArguement(age,name) values(20,'lrx'),(18,'yl')"},
            {"client":"python", "query_type": "table", "query_id":"9900", "wait":2, "query":"select count(),count(*) filter(where name='lrx') from table(count_if_with_AsteriskArguement)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          ["2", "1"]
        ]}
      ]
    },
    {
      "id": 5,
      "tags": ["materialized view"],
      "name": "#1934",
      "description": "materialized view support virtual columns like to a stream",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop view if exists test_mv_1934"},
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_1934"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_1934(value int)"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_1934", "query": "create materialized view test_mv_1934 as select count() from test_stream_1934"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_mv_1934", "wait":2, "query": "insert into test_stream_1934(value) values(1)"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_stream_1934(value) values(2)"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_stream_1934(value) values(3)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "query_end_timer":3, "query":"select `count()`, _tp_shard, _tp_sn from test_mv_1934 where _tp_sn >= 0"},
            {"client":"python", "query_type": "stream", "query_id":"9901", "query_end_timer":3,"drop_view":"test_mv_1934", "drop_view_wait":2, "query":"select `count()`, _tp_shard, _tp_sn from test_mv_1934 where _tp_time >= now() - 1m"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, 0, 0], [2, 0, 1], [3, 0, 2]
        ]},
        {"query_id":"9901", "expected_results":[
          [1, 0, 0], [2, 0, 1], [3, 0, 2]
        ]}
      ]
    },
    {
      "id": 6,
      "tags": ["emit interval"],
      "name": "#2105",
      "description": "limit the max emit interval is day",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_2105"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2105(value int)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9900", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1ns"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9901", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1us"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9902", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1ms"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9903", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1s"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9904", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1m"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9905", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1h"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9906", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1d"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9907", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1w"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9908", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1M"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9909", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1q"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9910", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1y"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]},
        {"query_id":"9901", "expected_results":[]},
        {"query_id":"9902", "expected_results":[]},
        {"query_id":"9903", "expected_results":[]},
        {"query_id":"9904", "expected_results":[]},
        {"query_id":"9905", "expected_results":[]},
        {"query_id":"9906", "expected_results":[]},
        {"query_id":"9907", "expected_results":"error_code:43"},
        {"query_id":"9908", "expected_results":"error_code:43"},
        {"query_id":"9909", "expected_results":"error_code:43"},
        {"query_id":"9910", "expected_results":"error_code:43"}
      ]
    },
    {
      "id": 7,
      "tags": ["join", "union"],
      "name": "#2229",
      "description": "streaming join with union query",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_2229"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2229(i int)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2229", "wait":1, "query_id":"9900", "query":"with cte as (select * from test_stream_2229 union select * from test_stream_2229) select i from test_stream_2229 join cte using(i)"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_2229", "wait":4, "kill": 9900, "kill_wait":2, "query": "insert into test_stream_2229(i) values(1)(2)(3)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[[1],[2],[3],[1],[2],[3]]}
      ]
    },
    {
      "id": 8,
      "tags": ["last x"],
      "name": "#2556",
      "description": "stremaing hop query with last x",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_2556"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2556(i int)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2556", "wait":3, "query_id":"9900", "query_end_timer":3, "query":"select count() from test_stream_2556 emit last 6m"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2556", "wait":3, "query_id":"9901", "query_end_timer":3, "query": "select count() from test_stream_2556 emit last 2000s"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2556", "wait":3, "query_id":"9902", "query_end_timer":3, "query": "select count() from test_stream_2556 emit last 1h"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]},
        {"query_id":"9901", "expected_results":[]},
        {"query_id":"9902", "expected_results":"error_code:62"}
      ]
    },
    {
      "id": 9,
      "tags": ["tumble window over table function query"],
      "name": "#2513",
      "description": "stremaing hop query with last x",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_2513"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2513(i int, s string)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2513", "wait":3, "query_id":"9900", "query_end_timer":3, "query":"with cte as (select i, s, _tp_time as event_time from test_stream_2513) select window_start, window_end from tumble(table(cte), _tp_time, 2s)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2513", "wait":3, "query_id":"9901", "query_end_timer":3, "query":"with cte as (select i, s, _tp_time from test_stream_2513) select window_start, window_end from tumble(table(cte), _tp_time, 2s)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":"error_code:47"},
        {"query_id":"9901", "expected_results":[]}
      ]
    },
    {
      "id": 10,
      "tags": ["global aggr"],
      "name": "#2900",
      "description": "global aggr group by window_start/window_end",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_2900"},
            {"client":"python", "query_type": "table", "exist": "test_stream_2900", "exist_wait":2, "wait":1, "query": "create stream test_stream_2900 (auction int64, bidder int64, channel string, price int64, url string, dateTime datetime64(3), extra string, _tp_time datetime64(3) default dateTime)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_2900", "wait":1, "query_end_timer":3, "query":"with data as(select * from test_stream_2900 where _tp_time >= earliest_ts() limit 100000000) SELECT AuctionBids.auction, AuctionBids.num FROM (SELECT B1.auction, count(*) AS num, window_start, window_end FROM hop(data, _tp_time, INTERVAL 2 SECOND, INTERVAL 10 SECOND) as B1 GROUP BY B1.auction, window_start, window_end) AS AuctionBids JOIN (SELECT max(CountBids.num) AS maxn, CountBids.window_start, CountBids.window_end FROM ( SELECT count(*) AS num, window_start, window_end FROM hop(data, _tp_time, INTERVAL 2 SECOND, INTERVAL 10 SECOND) as B2 GROUP BY B2.auction, window_start, window_end) AS CountBids GROUP BY CountBids.window_start, CountBids.window_end) AS MaxBids ON AuctionBids.window_start = MaxBids.window_start AND AuctionBids.window_end = MaxBids.window_end where AuctionBids.num >= MaxBids.maxn"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]}
      ]
    },
    {
      "id": 11,
      "tags": ["window function over table function query"],
      "name": "#3004",
      "description": "disable hop and session window function for historical data, tumble currently support table() style",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_3004"},
            {"client":"python", "query_type": "table", "exist": "test_stream_3004", "exist_wait":2, "wait":1, "query": "create stream test_stream_3004 (id int)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_3004", "wait":3, "query_end_timer":3, "query":"select * from hop(table(test_stream_3004), 1m, 2m)"},
            {"client":"python", "query_type": "stream", "query_id":"9901", "depends_on_stream":"test_stream_3004", "wait":3, "query_end_timer":3, "query":"select * from session(table(test_stream_3004), 1m)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":"error_code:48"},
        {"query_id":"9901", "expected_results":"error_code:48"}
      ]
    },
    {
      "id": 12,
      "tags": ["global aggr"],
      "name": "#3015",
      "description": "global aggr over tumble (with substream, with timeout, with join)",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_3015_l"},
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_3015_vk_r"},
            {"client":"python", "query_type": "table", "exist": "test_stream_3015_l", "exist_wait":2, "wait":1, "query": "create stream test_stream_3015_l(i int64, s string, timestamp datetime64(3, 'UTC')) settings event_time_column='timestamp'"},
            {"client":"python", "query_type": "table", "exist": "test_stream_3015_vk_r", "exist_wait":2, "wait":1, "query": "create stream test_stream_3015_vk_r(i int64, s string, timestamp datetime64(3, 'UTC')) primary key (i, s) settings mode='versioned_kv', event_time_column='timestamp'"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_3015_vk_r", "wait":1, "query": "insert into test_stream_3015_vk_r (i, s, timestamp) values(1, 'test', '2023-1-1 00:00:00')(1, 'test1', '2023-1-1 00:00:01')(2, 'test', '2023-1-1 00:00:01')(2, 'test1', '2023-1-1 00:00:02')"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_3015_l", "wait":1, "query":"WITH t1 AS ( SELECT _tp_time, i, s FROM test_stream_3015_l INNER JOIN test_stream_3015_vk_r AS wp ON test_stream_3015_l.i = test_stream_3015_vk_r.i WHERE (test_stream_3015_l._tp_time > '2023-01-01 00:00:00') AND (test_stream_3015_l.s = 'test') ), t2 AS ( SELECT window_start, i, s, (to_int(max(to_float(i))) + 1) AS max_v FROM tumble(t1, 2s) GROUP BY window_start, i, s ) SELECT sum(max_v) as income FROM t2 emit periodic 5s"},
            {"client":"python", "query_type": "stream", "query_id":"9901", "depends_on_stream":"test_stream_3015_l", "wait":1, "query":"WITH t1 AS ( SELECT _tp_time, i, s FROM test_stream_3015_l INNER JOIN test_stream_3015_vk_r AS wp ON test_stream_3015_l.i = test_stream_3015_vk_r.i WHERE (test_stream_3015_l._tp_time > '2023-01-01 00:00:00') AND (test_stream_3015_l.s = 'test') ), t2 AS ( SELECT window_start, i, s, (to_int(max(to_float(i)) over(partition by i, s)) + 1) AS max_v FROM tumble(t1, 2s) GROUP BY window_start) SELECT sum(max_v) as income FROM t2 partition by i, s emit periodic 5s"},
            {"client":"python", "query_type": "stream", "query_id":"9902", "depends_on_stream":"test_stream_3015_l", "wait":1, "query":"WITH t1 AS ( SELECT _tp_time, i, s FROM test_stream_3015_l INNER JOIN test_stream_3015_vk_r AS wp ON test_stream_3015_l.i = test_stream_3015_vk_r.i WHERE (test_stream_3015_l._tp_time > '2023-01-01 00:00:00') AND (test_stream_3015_l.s = 'test') ), t2 AS ( SELECT window_start, i, s, (to_int(max(to_float(i))) + 1) AS max_v FROM tumble(t1, 2s) GROUP BY window_start, i, s emit timeout 5s) SELECT sum(max_v) as income FROM t2 partition by s emit periodic 5s"},
            {"client":"python", "query_type": "stream", "query_id":"9903", "depends_on_stream":"test_stream_3015_l", "wait":1, "query":"WITH t1 AS ( SELECT _tp_time, i, s FROM test_stream_3015_l INNER JOIN test_stream_3015_vk_r AS wp ON test_stream_3015_l.i = test_stream_3015_vk_r.i WHERE (test_stream_3015_l._tp_time > '2023-01-01 00:00:00') AND (test_stream_3015_l.s = 'test') ), t2 AS ( SELECT window_start, i, s, (to_int(max(to_float(i))) + 1) AS max_v FROM tumble(t1, 2s) GROUP BY window_start, i, s ) SELECT sum(max_v) as income FROM t2 as a join t2 as b using(i, s) emit periodic 5s"},
            {"client":"python", "query_type": "table", "depends_on":"9903", "wait":1, "kill": "9900,9901,9902,9903", "kill_wait":10, "query": "insert into test_stream_3015_l (i, s, timestamp) values(1, 'test', '2023-1-1 00:00:00')(1, 'test1', '2023-1-1 00:00:00')(2, 'test', '2023-1-1 00:00:01')(2, 'test1', '2023-1-1 00:00:01')(1, 'test', '2023-1-1 00:00:02')(2, 'test', '2023-1-1 00:00:02')"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[[3]]},
        {"query_id":"9901", "expected_results":[[3]]},
        {"query_id":"9902", "expected_results":[[3],[8]]},
        {"query_id":"9903", "expected_results":[[3]]}
      ]
    },
    {
      "id": 13,
      "tags": ["Disable some pushdown optimization for table function"],
      "name": "#3064",
      "description": "Covering pushdown optimization for table function",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_3064_l"},
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_3064_r"},
            {"client":"python", "query_type": "table", "exist": "test_stream_3064_l", "exist_wait":2, "wait":1, "query": "create stream test_stream_3064_l(i int, k string, val float)"},
            {"client":"python", "query_type": "table", "exist": "test_stream_3064_r", "exist_wait":2, "wait":1, "query": "create stream test_stream_3064_r(j int, k2 string, status int)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_3064_r", "wait":1, "query":"with cte as (select i, k, val, j, k2, status from test_stream_3064_l as a inner join test_stream_3064_r as b on a.k = b.k2) select * from changelog(cte, i , k) where status = 1"},
            {"client":"python", "query_type": "table", "depends_on":"9900", "wait":1, "query": "insert into test_stream_3064_l(i, k, val) values (1, 'k', 11.1) (2, 'k', 33.3) (1, 'k2', 55.5) (2, 'k2', 77.7)"},
            {"client":"python", "query_type": "table", "wait":1, "query": "insert into test_stream_3064_r(j, k2, status) values (1, 'k', 1)"},
            {"client":"python", "query_type": "table", "query": "insert into test_stream_3064_r(j, k2, status) values (2, 'k2', 1)"},
            {"client":"python", "query_type": "table", "kill": "9900", "kill_wait":3, "query": "insert into test_stream_3064_r(j, k2, status) values (1, 'k', 0)"}
          ]
        },
        {
          "statements": [
            {"client":"python", "query_type": "stream", "query_id":"9901", "query_end_timer": 2, "query": "with cte as (select * from test_stream_3064_l) select i, k, val from tumble(cte, 2s) where _tp_time > earliest_ts() and window_start > 0"}
          ]
        },
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop view if exists test_stream_3064_v"},
            {"client":"python", "query_type": "table", "exist": "test_stream_3064_v", "exist_wait":2, "wait":1, "query": "create view test_stream_3064_v as select * from test_stream_3064_l"},
            {"client":"python", "query_type": "stream", "query_id":"9902", "depends_on_stream": "test_stream_3064_v", "wait":1, "query_end_timer":2, "drop_view":"test_stream_3064_v", "drop_view_wait":1, "query": "select i, k, val from tumble(test_stream_3064_v, 2s) where _tp_time > earliest_ts() and window_start > 0"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, "k", 11.1, 1, "k", 1, 1],
          [2, "k", 33.3, 1, "k", 1, 1],
          [1, "k2", 55.5, 2, "k2", 1, 1],
          [2, "k2", 77.7, 2, "k2", 1, 1],
          [1, "k", 11.1, 1, "k", 1, -1],
          [2, "k", 33.3, 1, "k", 1, -1]]
        },
        {"query_id":"9901", "expected_results":[
            [1, "k", 11.1],
            [2, "k", 33.3],
            [1, "k2", 55.5],
            [2, "k2", 77.7]]
        },
        {"query_id":"9902", "expected_results":[
            [1, "k", 11.1],
            [2, "k", 33.3],
            [1, "k2", 55.5],
            [2, "k2", 77.7]]
        }
      ]
    },
    {
      "id": 14,
      "tags": ["Emit timeout processing"],
      "name": "#2905",
      "description": "Covering timeout processing for window aggregations",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_2905"},
            {"client":"python", "query_type": "table", "exist": "test_stream_2905", "exist_wait":2, "wait":1, "query": "create stream test_stream_2905(id int, name string, val float, ts datetime)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_2905", "wait":1, "query":"select id, count(*), min(val), max(val), sum(val), avg(val), window_start, window_end from hop(test_stream_2905, ts, 2s, 5s) group by id, window_start, window_end emit stream timeout 2s"},
            {"client":"python", "query_type": "table", "depends_on":"9900", "wait":1, "kill": "9900", "kill_wait":4, "query": "insert into test_stream_2905(id, name, val, ts) values (1, 's1', 11.1, '2020-02-02 20:00:01')(2, 's2', 22.2, '2020-02-02 20:00:02')(1, 's3', 33.3, '2020-02-02 20:00:03')(2, 's4', 44.4, '2020-02-02 20:00:04');"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, 1, 11.1, 11.1, 11.1, 11.1, "2020-02-02 19:59:58", "2020-02-02 20:00:03"],
          [2, 1, 22.2, 22.2, 22.2, 22.2, "2020-02-02 19:59:58", "2020-02-02 20:00:03"],
          [1, 2, 11.1, 33.3, 44.4, 22.2, "2020-02-02 20:00:00", "2020-02-02 20:00:05"],
          [2, 2, 22.2, 44.4, 66.6, 33.3, "2020-02-02 20:00:00", "2020-02-02 20:00:05"],
          [1, 1, 33.3, 33.3, 33.3, 33.3, "2020-02-02 20:00:02", "2020-02-02 20:00:07"],
          [2, 2, 22.2, 44.4, 66.6, 33.3, "2020-02-02 20:00:02", "2020-02-02 20:00:07"],
          [2, 1, 44.4, 44.4, 44.4, 44.4, "2020-02-02 20:00:04", "2020-02-02 20:00:09"]]
        }
      ]
    },
    {
      "id": 15,
      "tags": ["Changelog Global Aggr"],
      "name": "#13",
      "description": "Covering changelog global aggr processing",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_13_vk"},
            {"client":"python", "query_type": "table", "exist": "test_stream_13_vk", "exist_wait":2, "wait":1, "query": "create stream test_stream_13_vk(id int, val float) primary key id settings mode='versioned_kv'"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_13_vk", "wait":1, "query":"select count(*), sum(val) from test_stream_13_vk emit periodic 1ms"},
            {"client":"python", "query_type": "table", "depends_on":"9900", "wait":1, "query": "insert into test_stream_13_vk(id, val) values (1, 1.1)(2, 2.2);"},
            {"client":"python", "query_type": "table", "kill": "9900", "kill_wait":2, "query": "insert into test_stream_13_vk(id, val) values (1, 11.1);"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [2, 3.3],
          [2, 13.3]]
        }
      ]
    },
    {
      "id": 16,
      "tags": ["Changelog join table"],
      "name": "#106",
      "description": "Covering changelog global aggr processing over join",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists left_test_stream_106_vk"},
            {"client":"python", "query_type": "table", "query": "drop stream if exists right_test_stream_106_vk"},
            {"client":"python", "query_type": "table", "exist": "left_test_stream_106_vk", "exist_wait":2, "wait":1, "query": "create stream left_test_stream_106_vk(id int, val float) primary key id settings mode='versioned_kv'"},
            {"client":"python", "query_type": "table", "exist": "right_test_stream_106_vk", "exist_wait":2, "wait":1, "query": "create stream right_test_stream_106_vk(id int, val float) primary key id settings mode='versioned_kv'"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"right_test_stream_106_vk", "wait":1, "query":"select id, count(*), sum(val), sum(b.val) from left_test_stream_106_vk as a join right_test_stream_106_vk as b on a.id = b.id group by id emit periodic 1ms"},
            {"client":"python", "query_type": "table", "depends_on":"9900", "wait":1, "query": "insert into right_test_stream_106_vk(id, val) values (1, 1.1)(2, 2.2);"},
            {"client":"python", "query_type": "table", "wait":1, "query": "insert into left_test_stream_106_vk(id, val) values (1, 1.1)(2, 2.2);"},
            {"client":"python", "query_type": "table", "wait":1, "query": "insert into right_test_stream_106_vk(id, val) values (1, 11.1);"},
            {"client":"python", "query_type": "table", "kill": "9900", "kill_wait":2, "wait":1, "query": "insert into left_test_stream_106_vk(id, val) values (1, 11.1);"}
          ]
        },
        {
          "statements": [
            {"client":"python", "query_type": "stream", "query_id":"9901", "query_end_timer":2, "query":"select id, count(*), sum(val), sum(b.val) from left_test_stream_106_vk as a join table(right_test_stream_106_vk) as b on a.id = b.id group by id emit periodic 1ms"},
            {"client":"python", "query_type": "table", "query_id":"9902", "query":"select id, count(*), sum(val), sum(b.val) from table(left_test_stream_106_vk) as a join table(right_test_stream_106_vk) as b on a.id = b.id group by id emit periodic 1ms"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, 1, 1.1, 1.1],
          [2, 1, 2.2, 2.2],
          [1, 1, 1.1, 11.1],
          [2, 1, 2.2, 2.2],
          [1, 1, 11.1, 11.1],
          [2, 1, 2.2, 2.2]]
        },
        {"query_id":"9901", "expected_results":[
          [1, 1, 11.1, 11.1],
          [2, 1, 2.2, 2.2]]
        },
        {"query_id":"9902", "expected_results":[
          [1, 1, 11.1, 11.1],
          [2, 1, 2.2, 2.2]]
        }
      ]
    },
    {
      "id": 17,
      "tags": ["changelog"],
      "name": "#172",
      "description": "Covering query json subcolumn and _tp_delta over changelog(stream)",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_17"},
            {"client":"python", "query_type": "table", "exist": "test_stream_17", "exist_wait":2, "wait":1, "query": "create stream test_stream_17(id int, raw json)"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_17", "wait":1, "query": "insert into test_stream_17(id, raw) values (1, '{\"projectId\": \"111\"}')"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "wait":1, "query_end_timer":3, "query":"select id, raw.projectId AS projectId_json, _tp_delta from changelog(test_stream_17, id) where _tp_time > earliest_ts()"}
          ]
        },
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_17_vk"},
            {"client":"python", "query_type": "table", "exist": "test_stream_17_vk", "exist_wait":2, "wait":1, "query": "create stream test_stream_17_vk(id int, raw json) primary key id settings mode='versioned_kv'"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_17_vk", "wait":1, "query": "insert into test_stream_17_vk(id, raw) values (1, '{\"projectId\": \"111\"}')"},
            {"client":"python", "query_type": "stream", "query_id":"9901", "wait":1, "query":"select t1.id, t1.raw.projectId, t2.raw.projectId, _tp_delta from changelog(test_stream_17, id) as t1 join changelog(test_stream_17_vk) as t2 on t1.id = t2.id where t1._tp_time > earliest_ts()"},
            {"client":"python", "query_type": "table", "depends_on":"9901", "wait":1, "kill":"9901", "kill_wait":3, "query": "insert into test_stream_17_vk(id, raw) values (1, '{\"projectId\": \"222\"}')"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, "111", 1]
        ]},
        {"query_id":"9901", "expected_results":[
          [1, "111", "111", 1],
          [1, "111", "111", -1],
          [1, "111", "222", 1]
        ]}
      ]
    },
    {
      "id": 18,
      "tags": ["changelog"],
      "name": "#221",
      "description": "Covering query changelog function over a view with changelog join",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_left_stream_18"},
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_right_stream_18"},
            {"client":"python", "query_type": "table", "exist": "test_left_stream_18", "exist_wait":2, "wait":1, "query": "CREATE stream test_left_stream_18(`storage_income` int64, `month` string)"},
            {"client":"python", "query_type": "table", "exist": "test_right_stream_18", "exist_wait":2, "wait":1, "query": "CREATE stream test_right_stream_18(`compute_income` float64, `month` string)"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_right_stream_18", "wait":1, "query": "CREATE VIEW test_v_stream_18 AS (WITH left AS (SELECT * FROM changelog(test_left_stream_18, month)), right AS (SELECT * FROM changelog(test_right_stream_18, month)) SELECT right.compute_income AS compute_income, left.storage_income AS storage_income, month FROM left INNER JOIN right ON left.month = right.month)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_v_stream_18", "query_id":"9900", "wait":1, "query":"select * from changelog(test_v_stream_18, month)"},
            {"client":"python", "query_type": "table", "depends_on":"9900", "wait":1, "query": "insert into test_left_stream_18(storage_income, month) values(100, 'Aug')(200, 'Oct')"},
            {"client":"python", "query_type": "table", "query": "insert into test_right_stream_18(compute_income, month) values(1, 'Aug')(2, 'Oct')"},
            {"client":"python", "query_type": "table", "kill":9900, "kill_wait":3, "query": "insert into test_right_stream_18(compute_income, month) values(100, 'Aug')"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, 100, "Aug", 1],
          [2, 200, "Oct", 1],
          [1, 100, "Aug", -1],
          [100, 100, "Aug", 1]
        ]}
      ]
    },
    {
      "id": 19,
      "tags": ["append_time_test"],
      "name": "#223",
      "description": "Covering the append time test.The orginal issue is append_time column is 0 while select _tp_time and _tp_append_time together",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_append_time"},
            {"client":"python", "query_type": "table", "exist": "test_append_time", "exist_wait":2, "wait":1, "query": "create stream if not exists test_append_time(id int, value int);"},
            {"client":"python", "query_type": "table", "query": "insert into test_append_time(id, value) values(1, 2);"},
            {"client":"python", "query_type": "table", "query": "insert into test_append_time(id, value) values(3, 2);"},
            {"client":"python", "query_type": "table", "query": "insert into test_append_time(id, value) values(5, 2);"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_append_time", "query_id":"9919", "wait":5, "query":"with cte as (select *, _tp_append_time from test_append_time)select date_diff('millisecond', to_datetime64(_tp_append_time/1000, 3, 'UTC'), _tp_time) < 10 from cte where _tp_time > earliest_timestamp();"},
            {"client":"python", "query_type": "table", "depends_on":"9919", "wait":1, "query": "insert into test_append_time(id, value) values(5, 2);"},
            {"client":"python", "query_type": "table", "query": "insert into test_append_time(id, value) values(6, 2);"},
            {"client":"python", "query_type": "table", "kill":9919, "kill_wait":3, "query": "insert into test_append_time(id, value) values(6, 2);"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9919", "expected_results":[
          ["True"],
          ["True"],
          ["True"],
          ["True"],
          ["True"],
          ["True"]
        ]}
      ]
    },
    {
      "id": 20,
      "tags": ["backfill", "virtual_column"],
      "name": "#370",
      "description": "Covering backfill from historical with virtual columns test.",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists fixed_test_stream_99"},
            {"client":"python", "query_type": "table", "exist": "fixed_test_stream_99", "exist_wait":2, "wait":1, "query": "create stream if not exists fixed_test_stream_99(id int, value int) settings shards=3, sharding_expr='weak_hash32(id)';"},
            {"client":"python", "query_type": "table", "depends_on_stream": "fixed_test_stream_99", "wait":2, "query": "insert into fixed_test_stream_99(id, value) values(1, 2);"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"fixed_test_stream_99", "query_id":"9920", "query":"select id, _tp_shard from fixed_test_stream_99 where _tp_time > earliest_ts() settings enable_backfill_from_historical_store=true;"},
            {"client":"python", "query_type": "table", "kill":9920, "kill_wait":3, "query": "insert into fixed_test_stream_99(id, value) values(2, 2)(3, 3);"},
            {"client":"python", "query_type": "table", "kill":9920, "kill_wait":3, "query": "insert into fixed_test_stream_99(id, value) values(2, 2)(3, 3);"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9920", "expected_results":[
          [1, 0],
          [2, 0],
          [3, 2]
        ]}
      ]
    },
    {
      "id": 21,
      "tags": ["window function", "const event time"],
      "name": "#423",
      "description": "Covering window function with const event time column test.",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists fixed_test_stream_99"},
            {"client":"python", "query_type": "table", "exist": "fixed_test_stream_99", "exist_wait":2, "wait":1, "query": "create random stream if not exists fixed_test_stream_99(raw string) settings eps=2;"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"fixed_test_stream_99", "wait": 1, "query_id":"9921", "query_end_timer":5, "query":"WITH cte AS (SELECT now64(3) AS _tp_time, to_int64(raw:event_ts) AS event_ts FROM fixed_test_stream_99 SETTINGS record_consume_batch_count = 1000) SELECT count(1), window_start, window_end FROM tumble(cte, 1s) GROUP BY window_start, window_end limit 2;"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"fixed_test_stream_99", "wait": 1, "query_id":"9922", "query_end_timer":5, "query":"WITH cte AS (SELECT now64(3) AS _tp_time, to_int64(raw:event_ts) AS event_ts FROM fixed_test_stream_99 SETTINGS record_consume_batch_count = 1000) SELECT count(1), window_start, window_end FROM hop(cte, 1s, 3s) GROUP BY window_start, window_end limit 3;"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"fixed_test_stream_99", "wait": 1, "query_id":"9923", "query_end_timer":5, "query":"WITH cte AS (SELECT now64(3) AS _tp_time, to_int64(raw:event_ts) AS event_ts FROM fixed_test_stream_99 SETTINGS record_consume_batch_count = 1000) SELECT count(1), window_start, window_end FROM session(cte, 1s, 3s) GROUP BY window_start, window_end limit 1;"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9921", "expected_results":[
          ["any_value", "any_value", "any_value"],
          ["any_value", "any_value", "any_value"]
        ]},
        {"query_id":"9922", "expected_results":[
          ["any_value", "any_value", "any_value"],
          ["any_value", "any_value", "any_value"],
          ["any_value", "any_value", "any_value"]
        ]},
        {"query_id":"9923", "expected_results":[
          ["any_value", "any_value", "any_value"]
        ]}
      ]
    },
    {
      "id": 22,
      "tags": ["global aggr distinct", "append only", "multi shard", "checkpoint"],
      "name": "#419",
      "description": "sum_distinct and count_distinct for append only stream with multishard.",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists v_12183487"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream v_12183487(id int, val int) primary key id settings shards=3;"},
            {"client":"python", "query_type": "stream", "wait":2, "depends_on_stream":"v_12183487", "query_id":"12183487213", "query":"subscribe to select sum_distinct_streaming(val), sum(val), count_distinct(val), count(val) from v_12183487 settings checkpoint_interval=1;"},
            {"client":"python", "query_type": "table", "depends_on": "12183487213", "kill":"12183487213", "kill_wait":3, "wait": 2, "query": "insert into v_12183487(id, val) values(3, 30);"}
          ]
        },
        {
          "statements": [
            {"client":"python", "query_type": "stream","query_id":"12183487213-1", "wait":4, "terminate": "manual","query":"recover from '12183487213'"},
            {"client":"python", "query_type": "table", "wait": 5, "query": "insert into v_12183487(id, val) values(4, 40),(5, 50);"},
            {"client":"python", "query_type": "table", "wait": 5, "query": "insert into v_12183487(id, val) values(4, 40),(5, 50);"},
            {"client":"python", "query_type": "table", "wait":5, "query": "kill query where query_id='12183487213' sync"},
            {"client":"python", "query_type": "table", "query":"unsubscribe to '12183487213'"}
          ]
        }
      ],
      "expected_results": [
        {
            "query_id":"12183487213",
            "expected_results":[
              [30, 30, 1, 1]
            ]
        },
        {
            "query_id":"12183487213-1",
            "expected_results":[
              [120, 120, 3, 3],
              [120, 210, 3, 5]
            ]
        }
      ]
    },
    {
      "id": 23,
      "tags": ["in set", "checkpoint"],
      "name": "#498",
      "description": "mv over versioned_kv with where in set",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop view if exists test_mv_498"},
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_dim_498"},
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_vk_498"},
            {"client":"python", "query_type": "table", "exist": "test_dim_498", "exist_wait":2, "wait":1, "query": "create stream test_dim_498(id int, type string)"},
            {"client":"python", "query_type": "table", "exist": "test_vk_498", "exist_wait":2, "wait":1, "query": "create stream test_vk_498(id int, value float) primary key id settings mode='versioned_kv'"},
            {"client":"python", "query_type": "table", "depends_on_stream": "test_dim_498", "wait": 1, "query": "insert into test_dim_498(id, type) values(1, 'old')(2, 'old')(3, 'new');"},
            {"client":"python", "query_type": "table", "wait":2, "query":"create materialized view test_mv_498 as with list as (select id from table(test_dim_498)) select id, value from test_vk_498 where id in list;"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_mv_498", "wait": 1, "query_id":"9923", "query":"select id, value from test_mv_498;"},
            {"client":"python", "query_type": "table", "depends_on":"9923", "wait": 1, "kill":"9923", "kill_wait":2, "drop_view":"test_mv_498", "drop_view_wait":2, "query": "insert into test_vk_498(id, value) values(3, 20)(3, 30)(1, 10)(4, 40)(5, 50);"}
          ]
        }
      ],
      "expected_results": [
        {
            "query_id":"9923",
            "expected_results":[[1, 10], [3, 20], [3, 30]]
        }
      ]
    }
  ]
}
