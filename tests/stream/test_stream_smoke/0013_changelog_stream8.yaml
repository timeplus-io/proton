test_suite_name: changelog_stream8
tag: smoke
test_suite_config:
  tests_2_run:
    ids_2_run:
      - all
    tags_2_run: []
    tags_2_skip:
      default:
        - todo
        - to_support
        - change
        - bug
        - sample
      cluster:
        - view
        - cluster_table_bug
comments: Tests covering the single shard changelog stream query smoke cases.
tests:
  - id: 48
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: subquery from view from view
    description: subquery from view from view
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view2_8;

          - client: python
            query_type: table
            wait: 0
            query: drop view if exists test14_view1_8;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_8;

          - client: python
            query_type: table
            wait: 2
            query: |
              create stream if not exists test14_subquery_8(i float, k1 int, k2 string)
              primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view1_8 as (select i, k1, k2, _tp_delta from test14_subquery_8);

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view2_8 as (select * from test14_view1_8);

          - client: python
            query_id: '1448'
            depends_on_stream: test14_subquery_8
            query_type: stream
            query: select max(i), min(i), avg(i) from test14_view2_8 emit periodic 1s;

          - client: python
            query_type: table
            depends_on: '1448'
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1448'
            kill_wait: 2
            wait: 1
            query: insert into test14_subquery_8(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop view if exists test14_view2_8;

          - client: python
            query_type: table
            wait: 2
            query: drop view if exists test14_view1_8;

          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_subquery_8;

    expected_results:
      - query_id: '1448'
        expected_results:
          - [1, 1, 1]
          - [3, 1, 2]
          - [5, 1, 3]
          - [8, 3, 5.333]
          - [9, 5, 7.333]
          - [11, 5, 8]
          - [11, 8, 9.666]
          - [14, 8, 10.666]

  - id: 49
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - group_by_primary_key
    name: subquery from subquery from subquery
    description: subquery from subquery from subquery
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_subquery_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_8(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_id: '1449'
            depends_on_stream: test14_subquery_8
            query_end_timer: 6
            query_type: stream
            query: |
              with cte1 as (with cte2 as (select i, k1, k2, _tp_delta from test14_subquery_8)
              select * from cte2) select max(i), min(i), avg(i), k2 from cte1 group by k2;

          - client: python
            query_type: table
            depends_on: '1449'
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1449'
            kill_wait: 6
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_subquery_8;

    expected_results:
      - query_id: '1449'
        expected_results:
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [5, 5, 5, 'c']
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [5, 5, 5, 'c']
          - [8, 8, 8, 'a']
          - [9, 9, 9, 'b']
          - [5, 5, 5, 'c']
          - [8, 8, 8, 'a']
          - [11, 11, 11, 'b']
          - [5, 5, 5, 'c']
          - [8, 8, 8, 'a']
          - [11, 11, 11, 'b']
          - [10, 10, 10, 'c']
          - [8, 8, 8, 'a']
          - [14, 14, 14, 'b']
          - [10, 10, 10, 'c']
          - [8, 8, 8, 'a']

  - id: 50
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - group_by_primary_key
    name: subquery from materlized view from view
    description: subquery from materlized view from view
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 2
            query: drop view if exists test14_view2_8;

          - client: python
            query_type: table
            wait: 2
            query: drop view if exists test14_view1_8;

          - client: python
            query_type: table
            wait: 2
            query: drop view if exists test14_view_8;

          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_subquery_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_subquery_8(i float, k1 int, k2 string) primary key k2 settings mode='versioned_kv';

          - client: python
            query_type: table
            wait: 2
            query: create view if not exists test14_view1_8 as (select i, k1, k2 from test14_subquery_8);

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_target_changelog_kv_8(i float, k1 int, k2 string) primary key k2 settings mode='changelog_kv';

          - client: python
            query_type: table
            wait: 2
            query: create materialized view if not exists test14_view2_8 into test14_target_changelog_kv_8 as (select i, k1, k2 from test14_view1_8 emit changelog);

          - client: python
            query_id: '1450'
            depends_on_stream: test14_subquery_8
            query_end_timer: 6
            query_type: stream
            query: select max(i), min(i), avg(i), k2 from test14_view2_8 group by k2;

          - client: python
            query_type: table
            depends_on: '1450'
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (1, 2, 'a')(3, 3, 'b')(5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (8, 2, 'a')(9, 3, 'b')(11, 2, 'b')(10, 1, 'c');

          - client: python
            query_type: table
            kill: '1450'
            kill_wait: 2
            wait: 2
            query: insert into test14_subquery_8(i, k1, k2) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: drop view if exists test14_view2_8;

          - client: python
            query_type: table
            wait: 2
            query: drop view if exists test14_view1_8;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_subquery_8;

          - client: python
            query_type: table
            wait: 0
            query: drop stream if exists test14_target_changelog_kv_8;

    expected_results:
      - query_id: '1450'
        expected_results:
          - [1, 1, 1, 'a']
          - [3, 3, 3, 'b']
          - [5, 5, 5, 'c']
          - [8, 8, 8, 'a']
          - [11, 11, 11, 'b']
          - [10, 10, 10, 'c']
          - [8, 8, 8, 'a']
          - [14, 14, 14, 'b']
          - [10, 10, 10, 'c']

  - id: 51
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: versioned_kv, partition by primary key, stream tailing, stateful function, udf
    description: versioned_kv, partition by primary key, stream tailing, stateful function, udf
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_14_8_add_five
              arguments:
                - name: value
                  type: float32
              return_type: float32
              source: |
                function test_14_8_add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_substream_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_8(val int, id int, name string) primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1451'
            depends_on_stream: test14_substream_8
            query_end_timer: 6
            query_type: stream
            query: select val, id, lag(val, 2), test_14_8_add_five(val), name from test14_substream_8 partition by id;

          - client: python
            query_type: table
            depends_on: '1451'
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1451'
            kill_wait: 3
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_substream_8;

    expected_results:
      - query_id: '1451'
        expected_results:
          - [1, 2, 0, 6, 'a']
          - [3, 3, 0, 8, 'b']
          - [5, 1, 0, 10, 'c']
          - [8, 2, 0, 13, 'a']
          - [9, 3, 0, 14, 'b']
          - [11, 2, 1, 16, 'b']
          - [10, 1, 0, 15, 'c']
          - [14, 2, 8, 19, 'b']

  - id: 52
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: versioned_kv, partition by primary key, global aggregation group by primary ky, stateful function
    description: versioned_kv, partition by primary key, global aggregation group by primary ky, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_substream_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_8(val int, id int, name string) primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1452'
            depends_on_stream: test14_substream_8
            query_type: stream
            query: select max(val), min(val), avg(val), id from test14_substream_8 partition by id group by id emit periodic 1s;

          - client: python
            query_type: table
            depends_on: '1452'
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (1, 2, 'a')(3, 3, 'b')(5, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (8, 2, 'a')(9, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (11, 2, 'b')(10, 1, 'c');

          - client: python
            query_type: table
            kill: '1452'
            kill_wait: 3
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: drop stream if exists test14_substream_8;

    expected_results:
      - query_id: '1452'
        expected_results:
          - [1, 1, 1, 2]
          - [3, 3, 3, 3]
          - [5, 5, 5, 1]
          - [8, 8, 8, 2]
          - [9, 9, 9, 3]
          - [11, 11, 11, 2]
          - [10, 10, 10, 1]
          - [14, 14, 14, 2]

  - id: 53
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: versionedid group by name;_kv, partition by primary key, global aggregation group by primary ky, stateful function
    description: versionedid group by name;_kv, partition by primary key, global aggregation group by primary ky, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_substream_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_8(val int, id int, name string) primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1453'
            depends_on_stream: test14_substream_8
            query_type: stream
            query: select max(val), min(val), avg(val), id, name from test14_substream_8 partition by id group by name emit periodic 1s;

          - client: python
            query_type: table
            depends_on: '1453'
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1453'
            kill_wait: 3
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: drop stream if exists test14_substream_8;

    expected_results:
      - query_id: '1453'
        expected_results:
          - [1, 1, 1, 2, 'a']
          - [3, 3, 3, 3, 'b']
          - [5, 5, 5, 1, 'c']
          - [8, 8, 8, 2, 'a']
          - [9, 9, 9, 3, 'b']
          - [0, 0, nan, 2, 'a']
          - [11, 11, 11, 2, 'b']
          - [10, 10, 10, 1, 'c']
          - [0, 0, nan, 2, 'a']
          - [14, 14, 14, 2, 'b']

  - id: 54
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: versioned_kv, partition by no primary key, stream tailing, UDF, stateless function
    description: versioned_kv, partition by no primary key, stream tailing, UDF, stateless function
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_14_8_add_five
              arguments:
                - name: value
                  type: float32
              return_type: float32
              source: |
                function test_14_8_add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_substream_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_8(val int, id int, name string) primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1454'
            depends_on_stream: test14_substream_8
            query_end_timer: 6
            query_type: stream
            query: select val, id, lag(val, 2), test_14_8_add_five(val), upper(name) from test14_substream_8 partition by name;

          - client: python
            query_type: table
            depends_on: '1454'
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (5, 1, 'c');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (8, 2, 'a');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (9, 3, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (11, 2, 'b');

          - client: python
            query_type: table
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (10, 1, 'c');

          - client: python
            query_type: table
            kill: '1454'
            kill_wait: 6
            wait: 2
            query: insert into test14_substream_8(val, id, name) values (14, 2, 'b');

          - client: python
            query_type: table
            wait: 3
            query: drop stream if exists test14_substream_8;

    expected_results:
      - query_id: '1454'
        expected_results:
          - [1, 2, 0, 6, 'A']
          - [3, 3, 0, 8, 'B']
          - [5, 1, 0, 10, 'C']
          - [8, 2, 0, 13, 'A']
          - [9, 3, 0, 14, 'B']
          - [11, 2, 3, 16, 'B']
          - [10, 1, 0, 15, 'C']
          - [14, 2, 9, 19, 'B']

  - id: 55
    tags:
      - versioned_kv_subquery/view/materialized_view
      - global_aggregation
      - gtoup_by_primary_key
    name: versioned_kv, partition by no primary key, global aggregation, group by primary key.stategul function
    description: versioned_kv, partition by no primary key, global aggregation, group by primary key.stategul function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 2
            query: drop stream if exists test14_substream_8;

          - client: python
            query_type: table
            wait: 2
            query: create stream if not exists test14_substream_8(val int, id int, name string) primary key id settings mode='versioned_kv';

          - client: python
            query_id: '1455'
            depends_on_stream: test14_substream_8
            query_type: stream
            query: select max(val), min(val), avg(val), id, name from test14_substream_8 partition by name group by id emit periodic 1s;

          - client: python
            query_type: table
            depends_on: '1455'
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (1, 2, 'a')(3, 3, 'b')(5, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (8, 2, 'a')(9, 3, 'b')(11, 2, 'b');

          - client: python
            query_type: table
            kill: '1455'
            kill_wait: 3
            wait: 1
            query: insert into test14_substream_8(val, id, name) values (10, 1, 'c')(14, 2, 'b');

          - client: python
            query_type: table
            wait: 1
            query: drop stream if exists test14_substream_8;

    expected_results:
      - query_id: '1455'
        expected_results:
          - [1, 1, 1, 2, 'a']
          - [3, 3, 3, 3, 'b']
          - [5, 5, 5, 1, 'c']
          - [0, 0, nan, 2, 'a']
          - [11, 11, 11, 2, 'b']
          - [9, 9, 9, 3, 'b']
          - [14, 14, 14, 2, 'b']
          - [9, 9, 9, 3, 'b']
          - [10, 10, 10, 1, 'c']

  - id: 56
    tags:
      - versioned_kv
      - multi_shard
      - streaming_tailing
      - stateful_function
    name: add into versioned_kv, multi_shard, streaming_tailing, stateful_function
    description: add into versioned_kv, multi_shard, streaming_tailing, stateful_function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test14_multishard_8;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test14_multishard_8(i float, k1 int, k2 string) primary key k2
              settings mode='versioned_kv', shards=3;

          - client: python
            query_id: '1456'
            depends_on_stream: test14_multishard_8
            query_type: stream
            query: |
              select lag(i, 2),
                     k1,
                     k2
              from test14_multishard_8;

          - client: python
            query_type: table
            depends_on: '1456'
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 1, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (1, 1, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (3, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 1, 'd');

          - client: python
            query_type: table
            kill: '1456'
            kill_wait: 3
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (5, 1, 'e');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test14_multishard_8;

    expected_results:
      - query_id: '1456'
        expected_results:
          - [0, 1, 'a']
          - [0, 1, 'b']
          - [2, 1, 'c']
          - [1, 1, 'd']
          - [3, 1, 'e']

  - id: 57
    tags:
      - versioned_kv
      - multi_shard
      - streaming_tailing
      - stateful_function
    name: update versioned_kv, multi_shard, streaming_tailing, stateful_function
    description: update versioned_kv, multi_shard, streaming_tailing, stateful_function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test14_multishard_8;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test14_multishard_8(i float, k1 int, k2 string) primary key k2
              settings mode='versioned_kv', shards=3;

          - client: python
            query_id: '1457'
            depends_on_stream: test14_multishard_8
            query_type: stream
            query: |
              select lag(i, 2),
                     k1,
                     k2
              from test14_multishard_8;

          - client: python
            query_type: table
            depends_on: '1457'
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 1, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 4, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (5, 5, 'c');

          - client: python
            query_type: table
            kill: '1457'
            kill_wait: 3
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (5, 1, 'b');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test14_multishard_8;

    expected_results:
      - query_id: '1457'
        expected_results:
          - [0, 1, 'a']
          - [0, 2, 'a']
          - [2, 3, 'b']
          - [1, 4, 'b']
          - [3, 5, 'c']
          - [2, 1, 'b']

  - id: 58
    tags:
      - versioned_kv
      - multi_shard
      - streaming_tailing
      - UDF
    name: add into versioned_kv, multi_shard, streaming_tailing, UDF
    description: add into versioned_kv, multi_shard, streaming_tailing, UDF
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_14_8_add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function test_14_8_add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test14_multishard_8;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test14_multishard_8(i float, k1 int, k2 string) primary key k2
              settings mode='versioned_kv', shards=3;

          - client: python
            query_id: '1458'
            depends_on_stream: test14_multishard_8
            query_type: stream
            query: |
              select test_14_8_add_five(i),
                     k1,
                     k2
              from test14_multishard_8;

          - client: python
            query_type: table
            depends_on: '1458'
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 1, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (1, 1, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (3, 1, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 1, 'd');

          - client: python
            query_type: table
            kill: '1458'
            kill_wait: 3
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (5, 1, 'e');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test14_multishard_8;

    expected_results:
      - query_id: '1458'
        expected_results:
          - [7, 1, 'a']
          - [6, 1, 'b']
          - [8, 1, 'c']
          - [7, 1, 'd']
          - [10, 1, 'e']

  - id: 59
    tags:
      - versioned_kv
      - multi_shard
      - streaming_tailing
      - UDF
    name: update versioned_kv, multi_shard, streaming_tailing, UDF
    description: update versioned_kv, multi_shard, streaming_tailing, UDF
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_14_8_add_five
              arguments:
              - name: value
                type: float32
              return_type: float32
              source: |
                function test_14_8_add_five(value) {
                    for (let i = 0; i < value.length; i++) {
                        value[i] = value[i] + 5;
                    }
                    return value;
                }

          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test14_multishard_8;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test14_multishard_8(i float, k1 int, k2 string) primary key k2
              settings mode='versioned_kv', shards=3;

          - client: python
            query_id: '1459'
            depends_on_stream: test14_multishard_8
            query_type: stream
            query: |
              select test_14_8_add_five(i),
                     k1,
                     k2
              from test14_multishard_8;

          - client: python
            query_type: table
            depends_on: '1459'
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 1, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (1, 2, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (3, 3, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (2, 4, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (5, 5, 'c');

          - client: python
            query_type: table
            kill: '1459'
            kill_wait: 3
            wait: 1
            query: |
              insert into test14_multishard_8(i, k1, k2)
              values (5, 1, 'b');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test14_multishard_8;

    expected_results:
      - query_id: '1459'
        expected_results:
          - [7, 1, 'a']
          - [6, 2, 'a']
          - [8, 3, 'b']
          - [7, 4, 'b']
          - [10, 5, 'c']
          - [10, 1, 'b']

