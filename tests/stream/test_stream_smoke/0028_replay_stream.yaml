test_suite_name: replay_stream
tag: smoke
test_suite_config:
  setup:
    statements: []
  tests_2_run:
    ids_2_run:
      - all
    tags_2_run: []
    tags_2_skip:
      default:
        - todo
        - to_support
        - change
        - bug
        - sample
        - native_not_support
      cluster:
        - view
        - cluster_table_bug
comments: Tests covering tail query with different replay speed, ail query from
  the data with different ingest interval To check result and actual output
  interval
tests:
  - id: 0
    tags:
      - replay_stream
    name: test replay_stream
    description: Check if the interval for data insertion is equal to the interval for outputï¼Œallowable error within 10ms.Also check the data interval whether equal to the insert interval,allowable error within 200ms(because you can't control the the insert interval accurately)
    steps:
      - statements:
          - client: python
            query_type: table
            query: drop stream if exists test29_stream

          - client: python
            query_type: table
            exist: test29_stream
            exist_wait: 2
            wait: 1
            query: create stream if not exists test29_stream (id int, value int);

          - client: python
            query_type: table
            wait: 1
            query: insert into test29_stream(id, value) values (1, 2);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream(id, value) values (3, 2);

          - client: python
            query_type: stream
            terminate: auto
            query_end_timer: 20
            query_id: '2900'
            wait: 1
            query: with cte as (select id, value, date_diff('millisecond', to_datetime64(lag(_tp_append_time, 1)/1000, 3, 'UTC'), to_datetime64(_tp_append_time/1000, 3, 'UTC')) as insert_interval,
                    date_diff('millisecond',lag(now64(), 1), now64()) as output_time_diff, _tp_time from test29_stream where _tp_time > earliest_timestamp() settings replay_speed=1)
                    select id, value, abs(insert_interval-2000) < 200, abs(insert_interval-output_time_diff) < 10 from cte;
    expected_results:
      - query_id: '2900'
        expected_results:
          - ["1", "2", any_value, any_value]
          - ["3", "2", "True", "True"]

  - id: 1
    tags:
      - replay a stream
    name: set the replay_speed
    description: set the replay_speed equal to 0.5, check whether the output
      interval is equal to 2 * data's interval
    steps:
      - statements:
          - client: python
            query_type: table
            query: drop stream if exists test29_stream

          - client: python
            query_type: table
            exist: test29_stream
            exist_wait: 2
            wait: 1
            query: create stream if not exists test29_stream (id int, value int);

          - client: python
            query_type: table
            wait: 1
            query: insert into test29_stream(id, value) values (1, 2);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream(id, value) values (3, 2);

          - client: python
            query_type: stream
            terminate: auto
            query_end_timer: 20
            query_id: '2901'
            wait: 1
            query: with cte as (select id, value, date_diff('millisecond', to_datetime64(lag(_tp_append_time, 1)/1000, 3, 'UTC'), to_datetime64(_tp_append_time/1000, 3, 'UTC')) as insert_interval,
                    date_diff('millisecond',lag(now64(), 1), now64()) as output_time_diff, _tp_time from test29_stream where _tp_time > earliest_timestamp() settings replay_speed=0.5)
                    select id, value, abs(insert_interval-2000) < 200, abs(2*insert_interval-output_time_diff) < 10 from cte;
    expected_results:
      - query_id: '2901'
        expected_results:
          - ["1", "2", any_value, any_value]
          - ["3", "2", "True", "True"]

  - id: 2
    tags:
      - replay_stream
      - aggregation
    name: replay stream with aggragation
    description: replay stream with aggragation
    steps:
      - statements:
          - client: python
            query_type: table
            query: drop stream if exists test29_stream

          - client: python
            query_type: table
            exist: test29_stream
            exist_wait: 2
            wait: 1
            query: create stream if not exists test29_stream (id int, value int);

          - client: python
            query_type: table
            wait: 1
            query: insert into test29_stream(id, value) values (1, 2);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream(id, value) values (3, 2);

          - client: python
            query_type: table
            wait: 1
            query: insert into test29_stream(id, value) values (1, 1);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream(id, value) values (9, 2);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream(id, value) values (1, 10);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream(id, value) values (3, 8);

          - client: python
            query_type: stream
            terminate: auto
            query_end_timer: 20
            query_id: '2902'
            wait: 1
            query: select max(value), min(value), id from test29_stream where _tp_time >
              earliest_timestamp() group by id settings replay_speed=1;
    expected_results:
      - query_id: '2902'
        expected_results:
          - [2,2,3]
          - [2,2,1]
          - [2,2,3]
          - [2,1,1]
          - [2,2,9]
          - [2,2,3]
          - [10,1,1]
          - [2,2,9]
          - [8,2,3]
          - [10,1,1]
          - [2,2,9]

  - id: 4
    tags:
      - replay_stream
      - join
    name: replay stream join stream table
    description: replay stream join stream table
    steps:
      - statements:
          - client: python
            query_type: table
            query: drop stream if exists test29_stream_1

          - client: python
            query_type: table
            exist: test29_stream_1
            exist_wait: 2
            wait: 1
            query: create stream if not exists test29_stream_1 (id int, value int);

          - client: python
            query_type: table
            query: drop stream if exists test29_stream_2

          - client: python
            query_type: table
            exist: test29_stream_2
            exist_wait: 2
            wait: 1
            query: create stream if not exists test29_stream_2 (id int, value int);

          - client: python
            query_type: table
            wait: 1
            query: insert into test29_stream_1(id, value) values (1, 2);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream_1(id, value) values (3, 2);

          - client: python
            query_type: table
            wait: 1
            query: insert into test29_stream_1(id, value) values (2, 1);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream_1(id, value) values (2, 2);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream_2(id, value) values (2, 3);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream_2(id, value) values (1, 6);

          - client: python
            query_type: table
            wait: 2
            query: insert into test29_stream_2(id, value) values (9, 4);

          - client: python
            query_type: table
            wait: 5
            query: insert into test29_stream_2(id, value) values (2, 5);
            
          - client: python
            query_type: stream
            terminate: auto
            query_end_timer: 30
            query_id: '2904'
            wait: 1
            query: with cte as (select id, value from test29_stream_1 where _tp_time >
              earliest_timestamp() settings replay_speed=1) select a.id,
              a.value, b.id, b.value from cte as a join table(test29_stream_2)
              as b on a.id=b.id;
    expected_results:
      - query_id: '2904'
        expected_results:
          - [1,2,1,6]
          - [2,1,2,3]
          - [2,1,2,5]
          - [2,2,2,3]
          - [2,2,2,5]
