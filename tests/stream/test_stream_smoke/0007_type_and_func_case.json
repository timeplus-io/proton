{
    "test_suite_name": "type_and_func",
    "test_suite_config":{
        "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
    },
    "comments":
        "Tests covering the steam query smoke cases.",
    "tests": [

        {
            "id": 0,
            "tags": ["type"],
            "name": "default type in one table and injest",
            "description": "create a stream test_type, 1 column for 1 type and ingest data with same or different column sequence of show create",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists test_type"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream test_type (uuid uuid, int int, uint uint8, string string, float float, decimal decimal32(3), date date, datetime datetime, enum enum('a'=1, 'b'=2, 'z'=26), tuple tuple(s string, i int), ipv4 ipv4, ipv6 ipv6, map map(string, int), nullable nullable(datetime64), timestamp datetime64(3) default now64(3))"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"test_type", "wait":1, "query":"insert into test_type (uuid, int, uint, string, float, decimal, date, datetime, enum, tuple, ipv4, ipv6, map, nullable, timestamp) values ('4c6a2a19-4f9f-456f-b076-c43ef97255a7', -1234567, 1234567, '{@string}', 12345.123, 123456.123, to_date('2022-03-24'), to_datetime('2022-03-24 17:17:17'), 'a', ('a', 0), '192.168.168.168', '2a02:aa08:e000:3100::20', {'key1':111}, null ,'2020-01-01 11:11:11')"},
                    {"client":"python","query_id":"801-1", "query_end_timer":2,"drop_stream":"test_type","drop_stream_wait":2, "query_type": "stream", "query":"select uuid, int, uint, string, float, decimal, date, datetime, enum, tuple, ipv4, ipv6, map, nullable from test_type settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["4c6a2a19-4f9f-456f-b076-c43ef97255a7", -1234567, 135, "{@string}", 12345.123, "123456.123", "2022-03-24", "2022-03-24 17:17:17", "a", "('a', 0)", "192.168.168.168", "2a02:aa08:e000:3100::20", "{'key1': 111}", "None"]]}
            ]
        },
        {
            "id": 1,
            "tags": ["type"],
            "name": "uint",
            "description": "create a stream t_unit with uint type and ingest, query",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "query":"drop stream if exists t_uint"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"create stream t_uint (uint uint)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_uint (uint) values (123456)"},
                    {"client":"python","query_id":"801-1", "query_end_timer":2, "query_type": "stream", "query":"select  uint from t_uint settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                [123456]]}
            ]
        },
        {
            "id": 2,
            "tags": ["type", "bug"],
            "name": "decimal",
            "description": "create a stream t_decimal with decimal type and ingest, query",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_decimal"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"create stream t_decimal (decimal decimal(3))"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_uint (decimal) values (1234.123)"},
                    {"client":"python","query_id":"801-1", "query_end_timer":2, "query_type": "stream", "query":"select decimal from t_decimal settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["1234.123"]]}
            ]
        },
        {
            "id": 3,
            "tags": ["type"],
            "name": "bool",
            "description": "create a stream t_bool with bool type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_bool (bool bool)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_bool (bool) values (true)"},
                    {"client":"python","query_id":"801-1", "query_end_timer":2, "query_type": "stream", "query":"select bool from t_bool settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["True"]]}
            ]
        },
        {
            "id": 4,
            "tags": ["type"],
            "name": "fixed_string",
            "description": "create a stream t_fixeds with fixed_string type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_fixeds"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_fixeds (fixeds fixed_string(32))"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_fixeds (fixeds) values ('{@fixed_string32}')"},
                    {"client":"python","query_id":"801-1", "query_end_timer":2, "query_type": "stream","drop_stream":"t_fixeds", "drop_stream_wait":2, "query":"select fixeds from t_fixeds settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["{@fixed_string32}"]]}
            ]
        },
        {
            "id": 5,
            "tags": ["type", "bug"],
            "name": "low_cardinality",
            "description": "create a stream t_lowcard with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop stream if exists t_lowcard"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_lowcard (lowcard low_cardinality(string))"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_lowcard (lowcard) values ('{@lowcardinalitystring}')"},
                    {"client":"python","query_id":"801-1", "query_end_timer":2, "query_type": "stream", "query":"select lowcard from t_lowcard settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["{@lowcardinalitystring}"]]}
            ]
        },
        {
            "id": 6,
            "tags": ["func"],
            "name": "latest()",
            "description": "create a stream t_lowcard with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop stream if exists t_latest"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_latest (name string, price int)"},
                    {"client":"python","query_id":"801-1", "query_end_timer":4, "query_type": "stream", "query":"select group_array(name) as names,group_array(latest_price) as prices,map_cast(names, prices) as name_prices, (name_prices['id1']/2 + name_prices['id2']/2) as comb_price from (select name,latest(price) as latest_price from t_latest group by name emit periodic 5s) limit 1"},
                    {"client":"python", "query_type": "table", "depends_on": "801-1", "query":"insert into t_latest (name, price) values ('id1', 100) ('id2', 200)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_latest (name, price) values ('id1', 500) ('id2', 300)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_latest (name, price) values ('id1', 300) ('id2', 1000)"}

                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["['id2', 'id1']", "[1000, 300]", "{'id2': 1000, 'id1': 300}", "650"]]}
            ]
        },
        {
            "id": 7,
            "tags": ["func"],
            "name": "to_float on filed out of map",
            "description": "create a stream t_float_map with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_float_map"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_float_map (id string, value_str string)"},
                    {"client":"python","query_id":"801-1", "query_type": "stream","depends_on_stream":"t_float_map", "wait":1,"query_end_timer":4, "query":" select group_array(id) as ids, group_array(latest_value_str) as latest_value_strs, map_cast(ids, latest_value_strs) as id_value_strs, id_value_strs['a'] as id_value_a, to_float(id_value_a) from (select id, latest(value_str) as latest_value_str from t_float_map group by id order by id) limit 1"},
                    {"client":"python", "query_type": "table", "depends_on": "801-1", "wait":2, "query":"insert into t_float_map (id, value_str) values ('a', '100.1')('b', '200.1')('c', '300.1')"}


                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["['a', 'b', 'c']", "['100.1', '200.1', '300.1']", "{'a': '100.1', 'b': '200.1', 'c': '300.1'}", "100.1", 100.1]]}
            ]
        },
        {
            "id": 8,
            "tags": ["emit_version"],
            "name": "to_float on filed out of map with emit version",
            "description": "create a stream t_float_map with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_float_map"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_float_map (id string, value_str string)"},
                    {"client":"python", "query_type": "stream", "depends_on_stream":"t_float_map", "query_id": "801-1","wait":1, "query_end_timer": 10, "query":"select emit_version(), group_array(id) as ids, group_array(latest_value_str) as latest_value_strs, map_cast(ids, latest_value_strs) as id_value_strs, id_value_strs['a'] as id_value_a, to_float(id_value_a) from (select id, latest(value_str) as latest_value_str from t_float_map group by id order by id) limit 1"},
                    {"client":"python", "query_type": "table", "wait":3,"depends_on":"801-1", "query":"insert into t_float_map (id, value_str) values ('a', '100.1') ('b', '200.1') ('c', '300.1')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["0", "['a', 'b', 'c']", "['100.1', '200.1', '300.1']", "{'a': '100.1', 'b': '200.1', 'c': '300.1'}", "100.1", 100.1]
                ]}
            ]
        },
        {
            "id": 9,
            "tags": ["emit_version"],
            "name": "to_float on filed out of map with emit version as view",
            "description": "create a stream t_float_map with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists emit_version_view"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_float_map"},
                    {"client":"python", "query_type": "table","wait":5, "query":"create stream t_float_map (id string, value_str string)"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"t_float_map","wait":1, "query":"create view if not exists emit_version_view as select emit_version(), group_array(id) as ids, group_array(latest_value_str) as latest_value_strs, map_cast(ids, latest_value_strs) as id_value_strs, id_value_strs['a'] as id_value_a, to_float(id_value_a) from (select id, latest(value_str) as latest_value_str from t_float_map group by id order by id)"},
                    {"client":"python", "query_type": "stream","depends_on_stream":"emit_version_view","wait":2, "query_id": "801-1", "query_end_timer": 10,  "drop_view":"emit_version_view", "drop_view_wait":2,"query":"select * from emit_version_view limit 1"},
                    {"client":"python", "query_type": "table", "wait":5,"depends_on":"801-1", "query":"insert into t_float_map (id, value_str) values ('a', '100.1') ('b', '200.1') ('c', '300.1')"},
                    {"client":"python", "query_type": "table", "wait":6, "query":"select 1"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["0", "['a', 'b', 'c']", "['100.1', '200.1', '300.1']", "{'a': '100.1', 'b': '200.1', 'c': '300.1'}", "100.1", 100.1]
                ]}
            ]
        },
        {
            "id": 10,
            "tags": ["emit_version"],
            "name": "emit verion on global aggre w/o group by",
            "description": "create a stream t_timeout, and create a view as a global query with emit timeout and check emit by timeout ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop stream if exists t_emit_version"},
                    {"client":"python", "query_type": "table","wait":5, "query":"create stream t_emit_version(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "stream","depends_on_stream":"t_emit_version", "wait":1, "query_id": "801-1", "query_end_timer": 10,"query":"select emit_version(), count() from t_emit_version limit 1"},
                    {"client":"python", "query_type": "table", "wait":3,"depends_on":"801-1", "query":"insert into t_emit_version(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 20, '2020-01-01 00:00:00') (2, 20, '2020-01-01 00:00:00')(3, 20, '2020-01-01 00:00:00') (1, 30, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"},
                    {"client":"python", "query_type": "table", "wait":6, "query":"select 1"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["0", 8]
                ]}
            ]
        },
        {
            "id": 11,
            "tags": ["timeout"],
            "name": "emit timeout on as view",
            "description": "create a stream t_timeout, and create a view as a tumble query with emit timeout and check emit by timeout ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop view if exists timeout_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_timeout"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_timeout(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on_stream":"t_timeout", "query":"create materialized view if not exists timeout_v as select emit_version(), id, count() from  tumble(t_timeout, time, 5s) group by id, window_end emit timeout 5s"},
                    {"client":"python", "query_type": "stream","wait":5, "depends_on_stream":"timeout_v","query_id": "801-1", "query_end_timer": 11,"drop_view":"timeout_v", "drop_view_wait":2, "query":"select * EXCEPT (_tp_time) from timeout_v settings seek_to='earliest'"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on":"801-1", "query":"insert into t_timeout(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 20, '2020-01-01 00:00:00') (2, 20, '2020-01-01 00:00:00')(3, 20, '2020-01-01 00:00:00') (1, 30, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"},
                    {"client":"python", "query_type": "table", "wait":6, "query":"select 1"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["0", "3", 2],
                ["0", "2", 2],
                ["0", "1", 2],
                ["1", "1", 2]
                ]}
            ]
        },
        {
            "id": 12,
            "tags": ["dedup"],
            "name": "dedup on stream as view",
            "description": "create a stream t_dedup, and create a view with dedup, tumble on the view to check dedup",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists dedup_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_dedup"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_dedup(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table", "wait":1, "depends_on_stream":"t_dedup","query":"create view if not exists dedup_v as select id, value, time, to_string(time) as time_string from dedup(t_dedup, id, value, to_string(time))"},
                    {"client":"python", "query_type": "stream","wait":1,"depends_on_stream":"dedup_v", "query_id": "801-1", "query_end_timer": 11, "drop_view":"dedup_v", "drop_view_wait":2,"query":"select emit_version(), id, count() from tumble(dedup_v, time, 5s) group by id, window_end"},
                    {"client":"python", "query_type": "table", "wait":2,"depends_on":"801-1", "query":"insert into t_dedup(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:00') (2, 10, '2020-01-01 00:00:00')(3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["0", "3", 1],
                ["0", "2", 1],
                ["0", "1", 1]
                ]}
            ]
        },
        {
            "id": 13,
            "tags": ["dedup", "bug"],
            "name": "dedup on stream by calculated field as key as view",
            "description": "create a stream t_dedup, and create a view with dedup on key with calculated alias field and check dedup ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop view if exists dedup_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_dedup"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_dedup(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_dedup", "wait":1, "query":"create view if not exists dedup_v as select id, value, time, to_string(time) as time_string from dedup(t_dedup, id, value, time_string)"},
                    {"client":"python", "query_type": "stream","wait":1, "query_id": "801-1","depends_on_stream":"dedup_v", "query_end_timer": 11,"drop_view":"dedup_v", "drop_view_wait":2, "query":"select emit_version(), id, count() from tumble(dedup_v, time, 5s) group by id, window_end"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on":"801-1", "query":"insert into t_dedup(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:00') (2, 10, '2020-01-01 00:00:00')(3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["0", "3", 1],
                ["0", "2", 1],
                ["0", "1", 1]
                ]}
            ]
        },
        {
            "id": 14,
            "tags": ["dedup", "cluster_table_bug"],
            "name": "dedup on table as view",
            "description": "create a stream t_dedup, and create a view with dedup on key with func as to_string(time) and check dedup ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists dedup_v"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_dedup"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_dedup(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on_stream":"t_dedup", "query":"insert into t_dedup(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:00') (2, 10, '2020-01-01 00:00:00')(3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists dedup_v as select id, value, time, to_string(time) as time_string from dedup(table(t_dedup), id, value, to_string(time))"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801-1","depends_on_stream":"dedup_v", "drop_view":"dedup_v", "drop_view_wait":2, "query":"select id, count() from dedup_v group by id"}

                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["3", 1],
                ["2", 1],
                ["1", 3]
                ]}
            ]
        },
        {
            "id": 15,
            "tags": ["xirr", "cluster_table_bug"],
            "name": "xirr on table as view",
            "description": "create a stream, and create a view with xirr check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists xirr_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_xirr"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_xirr(id int, income float, date date)"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_xirr", "wait":1, "query":"insert into t_xirr(id, income, date)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:01')(1, -1000, '2020-01-05 09:01:01')(1, 3100, '2020-01-18 09:01:01')(1, 100, '2020-03-09 09:01:01')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists xirr_v as select id, count(), xirr(income, date, 0.1) as xirr from table(t_xirr) group by id"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801-1", "depends_on_stream":"xirr_v","drop_view":"xirr_v", "drop_view_wait":2, "query":"select id, count(), avg(xirr) from xirr_v group by id"}

                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["1", 1, 3.313433458588908]
                ]}
            ]
        },
        {
            "id": 16,
            "tags": ["xirr", "bug"],
            "name": "xirr on table as view with calculated alias field as date",
            "description": "create a stream, and create a view with xirr with a caculated alias date from to_date(date of datetime64) check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists xirr_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_xirr"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_xirr(id int, income float, date datetime64)"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"t_xirr","wait":1, "query":"insert into t_xirr(id, income, date)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:01')(1, -1000, '2020-01-05 09:01:01')(1, 3100, '2020-01-18 09:01:01')(1, 100, '2020-03-09 09:01:01')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists xirr_v as select id, count(), xirr(income, to_date(date), 0.1) as xirr from table(t_xirr) group by id"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801-1",  "depends_on_stream":"xirr_v", "drop_view":"xirr_v", "drop_view_wait":2, "query":"select id, count(), avg(xirr) from xirr_v group by id"}

                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["1", 1, 3.313433458588908]
                ]}
            ]
        },
        {
            "id": 17,
            "tags": ["xirr"],
            "name": "xirr on stream as view",
            "description": "create a stream, and create a view with xirr check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists xirr_v"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_xirr"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_xirr(id int, income float, date date)"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"t_xirr","wait":1, "query":"create view if not exists xirr_v as select window_start, window_end, xirr(income, date) as xirr from tumble(t_xirr, to_datetime(date), interval 40 day) group by window_start, window_end"},
                    {"client":"python", "query_type": "stream","depends_on_stream": "xirr_v", "wait":1, "query_id": "801-1", "query_end_timer": 5,"drop_view":"xirr_v", "drop_view_wait":2, "query":"select count(), avg(xirr) from xirr_v"},
                    {"client":"python", "query_type": "table", "wait":3,"depends_on":"801-1", "query":"insert into t_xirr(id, income, date)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:01')(1, -1000, '2020-01-05 09:01:01')(1, 3100, '2020-01-18 09:01:01')(1, 100, '2020-03-09 09:01:01')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801-1", "expected_results":[
                ["1", 1.261261324646445]
                ]}
            ]
        }
    ]
}

