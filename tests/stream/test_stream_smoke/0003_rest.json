{
    "test_suite_name": "rest",
    "test_suite_config": {
        "tests_2_run": {
            "ids_2_run": [
                "all"
            ],
            "tags_2_run": [],
            "tags_2_skip": {"default":[
                "todo",
                "to_support",
                "change",
                "bug",
                "sample"
            ]
        }}
    },
    "comments": "test_rests covering the steam query smoke cases.",
    "tests": [
        {
            "id": 0,
            "tags": [
                "sqlformat"
            ],
            "name": "sqlformat",
            "description": "send a sqlformat request",
            "steps": [
                {
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "raw",
                            "query_type": "table",
                            "query_id": "401",
                            "query_url": "/proton/v1/sqlformat",
                            "http_method": "POST",
                            "data": {
                                "query": "select a.id, b.type, max(a.value), window_start as joined_w_start, window_end as joined_w_end from hop(test_rest, timestamp, interval 3 second, interval 5 second ) as a join table(test_rest_d) as b on a.id = b.id where b.type = 'roof' or b.type = 'field' or b.type = 'wall' group by a.id, b.type, window_start, window_end"
                            }
                        }
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id": "401",
                    "expected_results": {
                        "query": "SELECT\n  a.id, b.type, max(a.value), window_start AS joined_w_start, window_end AS joined_w_end\nFROM\n  hop(test_rest, timestamp, INTERVAL 3 SECOND, INTERVAL 5 SECOND) AS a\nINNER JOIN table(test_rest_d) AS b ON a.id = b.id\nWHERE\n  (b.type = 'roof') OR (b.type = 'field') OR (b.type = 'wall')\nGROUP BY\n  a.id, b.type, window_start, window_end",
                        "request_id": "any_value"
                    }
                }
            ]
        },
        {
            "id": 1,
            "tags": [
                "sqlformat"
            ],
            "name": "sqlformat",
            "description": "send a sqlformat request of subquery",
            "steps": [
                {
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "raw",
                            "query_type": "table",
                            "query_id": "401",
                            "query_url": "/proton/v1/sqlformat",
                            "http_method": "POST",
                            "data": {
                                "query": "with transformed as (select id, location, value, to_datetime64(json_extract_string(json, 'create_time'), 3, 'UTC') as transformed_timestamp from test_session) select top_k(value, 5, true, 30), array_join(max_k(value, 5)), window_start, window_end, __tp_session_id, id, location from session(transformed, transformed_timestamp, 2s, id, location) group by __tp_session_id, window_start, window_end, id, location"
                            }
                        }
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id": "401",
                    "expected_results": {
                        "query": "WITH transformed AS\n  (\n    SELECT\n      id, location, value, to_datetime64(json_extract_string(json, 'create_time'), 3, 'UTC') AS transformed_timestamp\n    FROM\n      test_session\n  )\nSELECT\n  top_k(value, 5, true, 30), array_join(max_k(value, 5)), window_start, window_end, __tp_session_id, id, location\nFROM\n  session(transformed, transformed_timestamp, 2s, id, location)\nGROUP BY\n  __tp_session_id, window_start, window_end, id, location",
                        "request_id": "any_value"
                    }
                }
            ]
        },
        {
            "id": 2,
            "tags": [
                "sqlformat"
            ],
            "name": "sqlformat",
            "description": "send a sqlformat request of complex query",
            "steps": [
                {
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "raw",
                            "query_type": "table",
                            "query_id": "401",
                            "query_url": "/proton/v1/sqlformat",
                            "http_method": "POST",
                            "data": {
                                "query": "WITH cte1 as (select 1 from t), cte2 as (select 2 from t2) SELECT tags['tenant'] AS tenant, extract(array_element(tags, 'stream'), '[source|sink]-(.*)') AS id, extract(array_element(tags, 'stream'), '(source|sink)-*') AS metrics_type, 'orbit_stream_output_throughput' AS metrics_name, window_start AS time, (max(value) - min(value)) / 60 AS value FROM tumble(default.k8s_metrics, 60s),k8s_metrics INNER JOIN default.k8s_metrics USING (_tp_time) ARRAY JOIN _tp_time AS time WHERE name = 'output_sent_bytes' GROUP BY tenant, name, window_start, tags['stream'] UNION ALL SELECT tags['tenant'] AS tenant, extract(array_element(tags, 'stream'), '[source|sink]-(.*)') AS id, extract(array_element(tags, 'stream'), '(source|sink)-*') AS metrics_type, if((tags['label']) = 'sink', 'orbit_stream_output_sent', 'orbit_stream_output_error') AS metrics_name, window_start AS time, latest(value) AS value FROM  tumble(default.k8s_metrics, 60s) WHERE (name = 'output_sent') AND (((tags['label']) = 'sink') OR ((tags['label']) = 'sink_fails')) GROUP BY tenant, name, tags['label'], window_start, tags['stream']"
                            }
                        }
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id": "401",
                    "expected_results": {
                        "query": "WITH cte1 AS\n  (\n    SELECT\n      1\n    FROM\n      t\n  ), cte2 AS\n  (\n    SELECT\n      2\n    FROM\n      t2\n  )\nSELECT\n  tags['tenant'] AS tenant, extract(tags['stream'], '[source|sink]-(.*)') AS id, extract(tags['stream'], '(source|sink)-*') AS metrics_type, 'orbit_stream_output_throughput' AS metrics_name, window_start AS time, (max(value) - min(value)) / 60 AS value\nFROM\n  tumble(default.k8s_metrics, 60s), k8s_metrics\nINNER JOIN default.k8s_metrics USING (_tp_time)\nARRAY JOIN _tp_time AS time\nWHERE\n  name = 'output_sent_bytes'\nGROUP BY\n  tenant, name, window_start, tags['stream']\nUNION ALL\nSELECT\n  tags['tenant'] AS tenant, extract(tags['stream'], '[source|sink]-(.*)') AS id, extract(tags['stream'], '(source|sink)-*') AS metrics_type, if((tags['label']) = 'sink', 'orbit_stream_output_sent', 'orbit_stream_output_error') AS metrics_name, window_start AS time, latest(value) AS value\nFROM\n  tumble(default.k8s_metrics, 60s)\nWHERE\n  (name = 'output_sent') AND (((tags['label']) = 'sink') OR ((tags['label']) = 'sink_fails'))\nGROUP BY\n  tenant, name, tags['label'], window_start, tags['stream']",
                        "request_id": "any_value"
                    }
                }
            ]
        },                
        {
            "id": 3,
            "tags": [
                "http_snap_shot"
            ],
            "name": "http_snap_shot",
            "description": "http_snap_shot insert, select",
            "steps": [
                {
                    "statements": [
                        {
                            "client": "python",
                            "query_type": "table",
                            "query": "drop stream if exists test_rest"
                        },
                        {
                            "client": "python",
                            "query_type": "table",
                            "query": "create stream test_rest (id string, location string, value float, timestamp datetime64(3) default now64(3))"
                        },
                        {
                            "client": "python",
                            "query_type": "table",
                            "depends_on_stream":"test_rest",
                            "wait": 2,
                            "query": "insert into test_rest (id, location, value, timestamp) values ('dev1', 'ca', 100, '2020-01-01 11:11:11')"
                        },
                        {
                            "client": "python",
                            "query_type": "table",
                            "query": "insert into test_rest (id, value, location, timestamp) values ('dev2', 100, 'ca', '2020-01-01 11:11:11')"
                        },
                        {
                            "client": "python",
                            "query_type": "table",
                            "query": "insert into test_rest (id, value, timestamp) values ('dev3', 100, '2020-01-01 11:11:11')"
                        },
                        {
                            "client": "rest",
                            "rest_type": "http_snapshot",
                            "wait": 2,
                            "query_type": "table",
                            "query_id": "401",
                            "query_url": "/?query=show streams where name = 'test_rest'",
                            "http_method": "GET"
                        }
                    ]
                },
                {
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "http_snapshot",
                            "query_type": "table",
                            "wait": 1,
                            "query_url": "/",
                            "http_method": "POST",
                            "data": "insert into test_rest (id, value, timestamp) values ('dev777', 100, '2020-01-01 11:11:11')"
                        }
                    ]
                },
                {
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "http_snapshot",
                            "query_type": "table",
                            "wait": 4,
                            "query_id": "402",
                            "query_url": "/",
                            "http_method": "POST",
                            "data": "select id, location, value, timestamp from test_rest order by id format JSON"
                        }
                    ]
                },
                {
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "http_snapshot",
                            "query_type": "table",
                            "query_id": "403",
                            "query_url": "/",
                            "http_method": "POST",
                            "data": "select id, location, value, value, timestamp from test_rest order by id"
                        }
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id": "402",
                    "expected_results": {
                        "meta": [
                            {
                                "name": "id",
                                "type": "string"
                            },
                            {
                                "name": "location",
                                "type": "string"
                            },
                            {
                                "name": "value",
                                "type": "float32"
                            },
                            {
                                "name": "timestamp",
                                "type": "datetime64(3)"
                            }
                        ],
                        "data": [
                            {
                                "id": "dev1",
                                "location": "ca",
                                "value": 100,
                                "timestamp": "2020-01-01 11:11:11.000"
                            },
                            {
                                "id": "dev2",
                                "location": "ca",
                                "value": 100,
                                "timestamp": "2020-01-01 11:11:11.000"
                            },
                            {
                                "id": "dev3",
                                "location": "",
                                "value": 100,
                                "timestamp": "2020-01-01 11:11:11.000"
                            },
                            {
                                "id": "dev777",
                                "location": "",
                                "value": 100,
                                "timestamp": "2020-01-01 11:11:11.000"
                            }
                        ],
                        "rows": 4,
                        "statistics": "any_value"
                    }
                },
                {
                    "query_id": "403",
                    "expected_results": "dev1\tca\t100\t100\t2020-01-01 11:11:11.000\ndev2\tca\t100\t100\t2020-01-01 11:11:11.000\ndev3\t\t100\t100\t2020-01-01 11:11:11.000\ndev777\t\t100\t100\t2020-01-01 11:11:11.000\n"
                }
            ]
        },
        {
            "id": 4,
            "tags": [],
            "name": "get_streams",
            "description": "verify GET /proton/v1/ddl/streams behavior (incomplete)",
            "steps": [
                {
                    "description": "Call GET /streams on a non-exist database",
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "raw",
                            "query_type": "table",
                            "query_id": "410",
                            "query_url": "/proton/v1/ddl/streams/nonexist",
                            "http_method": "GET"
                        }
                    ]
                },
                {
                    "description": "Call GET /streams on an empty database (i.e. no streams). This test assumes no other tests create any stream in the `neutron` database.",
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "raw",
                            "query_type": "table",
                            "query_id": "411",
                            "query_url": "/proton/v1/ddl/streams/neutron",
                            "http_method": "GET"
                        }
                    ]
                },
                {
                    "description": "Call GET /streams on a non-exist stream",
                    "statements": [
                        {
                            "client": "rest",
                            "rest_type": "raw",
                            "query_type": "table",
                            "query_id": "412",
                            "query_url": "/proton/v1/ddl/streams/neutron/foo",
                            "http_method": "GET"
                        }
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id": "410",
                    "expected_results": {
                        "code": 81,
                        "error_msg": "Databases nonexist does not exist."
                    }
                },
                {
                    "query_id": "411",
                    "expected_results": {
                        "data": [],
                        "request_id": "any_value"
                    }
                },
                {
                    "query_id": "412",
                    "expected_results": {
                        "code": 60,
                        "error_msg": "No stream named 'foo' in database 'neutron'",
                        "request_id": "any_value"
                    }
                }
            ]
        }
    ]
}
