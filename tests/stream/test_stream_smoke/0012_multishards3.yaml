test_suite_name: multishards3
tag: smoke
test_suite_config:
  tests_2_run:
    ids_2_run:
      - all
    tags_2_run: []
    tags_2_skip:
      default:
        - todo
        - to_support
        - change
        - bug
        - sample
      cluster:
        - view
        - cluster_table_bug
comments: Tests covering the multishard stream query smoke cases.
tests:
  - id: 20
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - global_aggregation
      - group_by
      - UDA
    name: streaming aggregation group by, UDA add
    description: streaming aggregation group by, UDA add
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_13_3_sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }
          - client: python
            query_type: table
            wait: 1
            query: |
              drop view if exists test13_view2_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              drop view if exists test13_view1_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k1 int, k2 string) settings shards=3;

          - client: python
            query_id: '1320'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select test_13_3_sec_large(i),
                     k2
              from test13_multishard_3
              group by k2
              order by k2 emit periodic 100ms;

          - client: python
            query_type: table
            depends_on: '1320'
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (1, 0, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (2, 0, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (3, 0, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (4, 0, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (5, 0, 'a');

          - client: python
            query_type: table
            kill: '1320'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (6, 0, 'b');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1320'
        expected_results:
          - [-1, 'a']
          - [-1, 'a']
          - [-1, 'b']
          - [-1, 'a']
          - [-1, 'b']
          - [-1, 'c']
          - [-1, 'a']
          - [-1, 'b']
          - [3, 'c']
          - [1, 'a']
          - [-1, 'b']
          - [3, 'c']
          - [1, 'a']
          - [2, 'b']
          - [3, 'c']

  - id: 21
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - global_aggregation
      - no_group_by
      - stateful_function
    name: streaming aggregation no group by, stateful function
    description: streaming aggregation no group by, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k1 int, k2 string) settings shards=3;

          - client: python
            query_id: '1321'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select max(i),
                     min(i),
                     avg(i),
                     count(i)
              from test13_multishard_3 emit periodic 100ms;

          - client: python
            query_type: table
            depends_on: '1321'
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (1, 0, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (2, 0, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (3, 0, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (4, 0, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (5, 0, 'a');

          - client: python
            query_type: table
            kill: '1321'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (6, 0, 'b');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1321'
        expected_results:
          - [1, 1, 1, 1]
          - [2, 1, 1.5, 2]
          - [3, 1, 2, 3]
          - [4, 1, 2.5, 4]
          - [5, 1, 3, 5]
          - [6, 1, 3.5, 6]

  - id: 22
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - global_aggregation
      - no_group_by
      - UDA
    name: streaming aggregation no group by, UDA
    description: streaming aggregation no group by, UDA
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_13_3_sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k1 int, k2 string) settings shards=3;

          - client: python
            query_id: '1322'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select test_13_3_sec_large(i)
              from test13_multishard_3 emit periodic 100ms;

          - client: python
            query_type: table
            depends_on: '1322'
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (1, 0, 'a');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (2, 0, 'b');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (3, 0, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (4, 0, 'c');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (5, 0, 'a');

          - client: python
            query_type: table
            kill: '1322'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3 (i, k1, k2)
              values (6, 0, 'b');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1322'
        expected_results:
          - [-1]
          - [1]
          - [2]
          - [3]
          - [4]
          - [5]

  - id: 23
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - tumble_window_aggregation
      - group_by
      - stateful_function
      - bug
    name: tumble window aggregation group by, stateful function
    description: tumble window aggregation group by, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k int, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1323'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select k,
                     max(i),
                     min(i),
                     avg(i),
                     count(i),
                     sum(i),
                     median(i),
                     window_start as s,
                     window_end as e
              from tumble(test13_multishard_3 ,timestamp, 5s)
              group by k,
                       window_start,
                       window_end
              order by k;

          - client: python
            query_type: table
            depends_on: '1323'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(0, 0, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(1, 1, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(2, 0, '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(3, 1, '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(4, 0, '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(5, 1, '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(6, 0, '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(7, 1, '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(8, 0, '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(9, 1, '2021-11-02 20:00:10');

          - client: python
            query_type: table
            kill: '1323'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(10, 0, '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1323'
        expected_results:
          - [0, 2, 0, 1, 2, 2, 1, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [1, 3, 1, 2, 2, 4, 2, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [0, 8, 4, 6, 3, 18, 6, '2021-11-02 20:00:05', '2021-11-02 20:00:10']
          - [1, 7, 5, 6, 2, 12, 6, '2021-11-02 20:00:05', '2021-11-02 20:00:10']

  - id: 24
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - tumble_window_aggregation
      - group_by
      - UDA
      - bug
    name: tumble window aggregation group by, UDA
    description: tumble window aggregation group by, UDA
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_13_3_sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k int, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1324'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select k,
                     test_13_3_sec_large(i),
                     window_start as s,
                     window_end as e
              from tumble(test13_multishard_3 ,timestamp, 5s)
              group by k,
                       window_start,
                       window_end
              order by k;

          - client: python
            query_type: table
            depends_on: '1324'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(0, 0, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(1, 1, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(2, 0, '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(3, 1, '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(4, 0, '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(5, 1, '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(6, 0, '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(7, 1, '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(8, 0, '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(9, 1, '2021-11-02 20:00:10');

          - client: python
            query_type: table
            kill: '1324'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(10, 0, '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1324'
        expected_results:
          - [0, 0, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [1, 1, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [0, 6, '2021-11-02 20:00:05', '2021-11-02 20:00:10']
          - [1, 5, '2021-11-02 20:00:05', '2021-11-02 20:00:10']

  - id: 25
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - tumble_window_aggregation
      - no_group_by
      - stateful_function
      - bug
    name: tumble window aggregation no group by, stateful function
    description: tumble window aggregation no group by, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k int, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1325'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select max(i),
                     min(i),
                     avg(i),
                     count(i),
                     sum(i),
                     median(i),
                     window_start as s,
                     window_end as e
              from tumble(test13_multishard_3 ,timestamp, 5s)
              group by window_start,
                       window_end;

          - client: python
            query_type: table
            depends_on: '1325'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(0, 0, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(1, 1, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(2, 0, '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(3, 1, '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(4, 0, '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(5, 1, '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(6, 0, '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(7, 1, '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(8, 0, '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(9, 1, '2021-11-02 20:00:10');

          - client: python
            query_type: table
            kill: '1325'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(10, 0, '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1325'
        expected_results:
          - [3, 0, 1.5, 4, 6, 1.5, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [8, 4, 6, 5, 30, 6, '2021-11-02 20:00:05', '2021-11-02 20:00:10']

  - id: 26
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - tumble_window_aggregation
      - no_group_by
      - UDA
      - bug
    name: tumble window aggregation no group by, UDA
    description: tumble window aggregation no group by, UDA
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_13_3_sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k int, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1326'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select test_13_3_sec_large(i),
                     window_start as s,
                     window_end as e
              from tumble(test13_multishard_3 ,timestamp, 5s)
              group by window_start,
                       window_end;

          - client: python
            query_type: table
            depends_on: '1326'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(0, 0, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(1, 1, '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(2, 0, '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(3, 1, '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(4, 0, '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(5, 1, '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(6, 0, '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(7, 1, '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(8, 0, '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(9, 1, '2021-11-02 20:00:10');

          - client: python
            query_type: table
            kill: '1326'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k, timestamp)
              values(10, 0, '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1326'
        expected_results:
          - [2, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [7, '2021-11-02 20:00:05', '2021-11-02 20:00:10']

  - id: 27
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - hop_window_aggregation
      - group_by
      - stateful_function
      - bug
    name: hop window aggregation group by, stateful function
    description: hop window aggregation group by, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop view if exists test13_view2_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              drop view if exists test13_view1_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k1 int, k2 string, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1327'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select k2,
                     max(i),
                     min(i),
                     avg(i),
                     count(i),
                     window_start as s,
                     window_end as e
              from hop(test13_multishard_3, timestamp, 2s, 5s)
              group by k2,
                       window_start,
                       window_end;

          - client: python
            query_type: table
            depends_on: '1327'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(0, 0, 'a', '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(1, 1, 'b', '2021-11-02 20:00:02');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(2, 2, 'a', '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(3, 3, 'b', '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(4, 4, 'a', '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(5, 0, 'b', '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(6, 1, 'a', '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(7, 2, 'b', '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(8, 3, 'a', '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(9, 4, 'b', '2021-11-02 20:00:10');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(10, 0, 'a', '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(11, 1, 'b', '2021-11-02 20:00:12');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(12, 2, 'a', '2021-11-02 20:00:13');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(13, 3, 'b', '2021-11-02 20:00:14');

          - client: python
            query_type: table
            kill: '1327'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(14, 4, 'a', '2021-11-02 20:00:15');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1327'
        expected_results:
          - ['a', 0, 0, 0, 1, '2021-11-02 19:59:58', '2021-11-02 20:00:03']
          - ['b', 1, 1, 1, 1, '2021-11-02 19:59:58', '2021-11-02 20:00:03']
          - ['a', 2, 0, 1, 2, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - ['b', 3, 1, 2, 2, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - ['a', 4, 2, 3, 2, '2021-11-02 20:00:02', '2021-11-02 20:00:07']
          - ['b', 5, 1, 3, 3, '2021-11-02 20:00:02', '2021-11-02 20:00:07']
          - ['a', 6, 4, 5, 2, '2021-11-02 20:00:04', '2021-11-02 20:00:09']
          - ['b', 7, 3, 5, 3, '2021-11-02 20:00:04', '2021-11-02 20:00:09']
          - ['a', 8, 6, 7, 2, '2021-11-02 20:00:06', '2021-11-02 20:00:11']
          - ['b', 9, 5, 7, 3, '2021-11-02 20:00:06', '2021-11-02 20:00:11']
          - ['a', 10, 8, 9, 2, '2021-11-02 20:00:08', '2021-11-02 20:00:13']
          - ['b', 11, 7, 9, 3, '2021-11-02 20:00:08', '2021-11-02 20:00:13']
          - ['a', 12, 10, 11, 2, '2021-11-02 20:00:10', '2021-11-02 20:00:15']
          - ['b', 13, 9, 11, 3, '2021-11-02 20:00:10', '2021-11-02 20:00:15']

  - id: 28
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - hop_window_aggregation
      - group_by
      - UDA
      - bug
    name: hop window aggregation group by, UDA
    description: hop window aggregation group by, UDA
    steps:
      - statements:
          - client: rest
            rest_type: raw
            query_type: table
            query_url: /proton/v1/udfs
            http_method: POST
            data:
              type: javascript
              name: test_13_3_sec_large
              arguments:
              - name: value
                type: float32
              is_aggregation: true
              return_type: float32
              source: |
                {
                  initialize: function() { 
                    this.max = -1.0;
                    this.sec = -1.0;
                  },

                  process: function(values) {
                    for(let i=0; i<values.length; i++) {
                      if(values[i] > this.max) {
                        this.sec = this.max;
                        this.max = values[i];
                      }
                      if(values[i] < this.max && values[i] > this.sec)
                        this.sec = values[i];
                    }
                  },

                  finalize: function() {
                    return this.sec;
                  },

                  serialize: function() {
                    let s = {"max": this.max, "sec":this.sec };
                    return JSON.stringify(s);
                  },

                  deserialize: function(state_str) {
                    let s = JSON.parse(state_str);
                    this.max = s["max"];
                    this.sec = s["sec"];
                  },

                  merge: function(state_str) {
                    let s = JSON.parse(state_str);
                    if (s["sec"] >= this.max) {
                      this.max = s["max"];
                      this.sec = s["sec"];
                    } else if (s["max"] >= this.max) {
                      this.sec = this.max;
                      this.max = s["max"];
                    } else if (s["max"] > this.sec) {
                      this.sec = s["max"];
                    }
                  }
                }
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k1 int, k2 string, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1328'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select k2,
                     test_13_3_sec_large(i),
                     window_start as s,
                     window_end as e
              from hop(test13_multishard_3, timestamp, 2s, 5s)
              group by k2,
                       window_start,
                       window_end;

          - client: python
            query_type: table
            depends_on: '1328'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(0, 0, 'a', '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(1, 1, 'b', '2021-11-02 20:00:02');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(2, 2, 'a', '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(3, 3, 'b', '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(4, 4, 'a', '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(5, 0, 'b', '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(6, 1, 'a', '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(7, 2, 'b', '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(8, 3, 'a', '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(9, 4, 'b', '2021-11-02 20:00:10');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(10, 0, 'a', '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(11, 1, 'b', '2021-11-02 20:00:12');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(12, 2, 'a', '2021-11-02 20:00:13');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(13, 3, 'b', '2021-11-02 20:00:14');

          - client: python
            query_type: table
            kill: '1328'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(14, 4, 'a', '2021-11-02 20:00:15');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1328'
        expected_results:
          - ['a', -1, '2021-11-02 19:59:58', '2021-11-02 20:00:03']
          - ['b', -1, '2021-11-02 19:59:58', '2021-11-02 20:00:03']
          - ['a', 0, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - ['b', 1, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - ['a', 2, '2021-11-02 20:00:02', '2021-11-02 20:00:07']
          - ['b', 3, '2021-11-02 20:00:02', '2021-11-02 20:00:07']
          - ['a', 4, '2021-11-02 20:00:04', '2021-11-02 20:00:09']
          - ['b', 5, '2021-11-02 20:00:04', '2021-11-02 20:00:09']
          - ['a', 6, '2021-11-02 20:00:06', '2021-11-02 20:00:11']
          - ['b', 7, '2021-11-02 20:00:06', '2021-11-02 20:00:11']
          - ['a', 8, '2021-11-02 20:00:08', '2021-11-02 20:00:13']
          - ['b', 9, '2021-11-02 20:00:08', '2021-11-02 20:00:13']
          - ['a', 10, '2021-11-02 20:00:10', '2021-11-02 20:00:15']
          - ['b', 11, '2021-11-02 20:00:10', '2021-11-02 20:00:15']

  - id: 29
    tags:
      - multishards
      - append_only
      - streaming_aggregation
      - window_aggregation
      - hop_window_aggregation
      - no_group_by
      - stateful_function
      - bug
    name: hop window aggregation no group by, stateful function
    description: hop window aggregation no group by, stateful function
    steps:
      - statements:
          - client: python
            query_type: table
            wait: 1
            query: |
              drop stream if exists test13_multishard_3;

          - client: python
            query_type: table
            wait: 1
            query: |
              create stream if not exists test13_multishard_3(i float, k1 int, k2 string, timestamp datetime64(3) default now64(3)) settings shards=3;

          - client: python
            query_id: '1329'
            depends_on_stream: test13_multishard_3
            query_type: stream
            query: |
              select max(i),
                     min(i),
                     avg(i),
                     count(i),
                     window_start as s,
                     window_end as e
              from hop(test13_multishard_3, timestamp, 2s, 5s)
              group by window_start,
                       window_end;

          - client: python
            query_type: table
            depends_on: '1329'
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(0, 0, 'a', '2021-11-02 20:00:01');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(1, 1, 'b', '2021-11-02 20:00:02');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(2, 2, 'a', '2021-11-02 20:00:03');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(3, 3, 'b', '2021-11-02 20:00:04');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(4, 4, 'a', '2021-11-02 20:00:05');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(5, 0, 'b', '2021-11-02 20:00:06');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(6, 1, 'a', '2021-11-02 20:00:07');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(7, 2, 'b', '2021-11-02 20:00:08');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(8, 3, 'a', '2021-11-02 20:00:09');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(9, 4, 'b', '2021-11-02 20:00:10');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(10, 0, 'a', '2021-11-02 20:00:11');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(11, 1, 'b', '2021-11-02 20:00:12');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(12, 2, 'a', '2021-11-02 20:00:13');

          - client: python
            query_type: table
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(13, 3, 'b', '2021-11-02 20:00:14');

          - client: python
            query_type: table
            kill: '1329'
            kill_wait: 3
            wait: 1
            query: |
              insert into test13_multishard_3(i, k1, k2, timestamp)
              values(14, 4, 'a', '2021-11-02 20:00:15');

          - client: python
            query_type: table
            wait: 3
            query: |
              drop stream if exists test13_multishard_3;

    expected_results:
      - query_id: '1329'
        expected_results:
          - [1, 0, 0.5, 2, '2021-11-02 19:59:58', '2021-11-02 20:00:03']
          - [3, 0, 1.5, 4, '2021-11-02 20:00:00', '2021-11-02 20:00:05']
          - [5, 1, 3, 5, '2021-11-02 20:00:02', '2021-11-02 20:00:07']
          - [7, 3, 5, 5, '2021-11-02 20:00:04', '2021-11-02 20:00:09']
          - [9, 5, 7, 5, '2021-11-02 20:00:06', '2021-11-02 20:00:11']
          - [11, 7, 9, 5, '2021-11-02 20:00:08', '2021-11-02 20:00:13']
          - [13, 9, 11, 5, '2021-11-02 20:00:10', '2021-11-02 20:00:15']

