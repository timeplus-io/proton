test_suite_name: emit_changelog
tag: smoke
test_suite_config:
  tests_2_run:
    ids_2_run:
      - all
    tags_2_run: []
    tags_2_skip:
      default:
        - todo
        - to_support
        - change
        - bug
        - sample
      cluster:
        - view
        - cluster_table_bug
comments: Tests covering the stream query with emit changelog smoke cases.

tests:
  - id: 0
    tags:
      - "global aggr"
      - "emit changelog"
    name: global-aggr-emit-changelog-over-append-only
    description: global aggregation emit changelog query over append stream
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_stream;

        - client: python
          query_type: table
          exist: test30_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_stream (i int, k string);

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_stream
          wait: 1
          query: |
            select count(), _tp_delta from test30_stream emit changelog periodic 1s;

        - client: python
          query_type: table
          depends_on: 3000
          wait: 1
          query: |
            insert into test30_stream(i, k) values (1, 'k1');

        - client: python
          query_type: table
          kill: 3000
          kill_wait: 3
          wait: 1
          query: |
            insert into test30_stream(i, k) values (1, 'k2');

    expected_results:
      - query_id: '3000'
        expected_results:
          - [1, 1]
          - [1, -1]
          - [2, 1]

  - id: 1
    tags:
      - "global aggr"
      - "emit changelog"
    name: global-aggr-emit-changelog-over-versioned_kv
    description: global aggregation emit changelog query over versioned_kv
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_vk_stream;

        - client: python
          query_type: table
          exist: test30_vk_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_vk_stream (i int, k string) primary key i settings mode='versioned_kv';

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_vk_stream
          wait: 1
          query: |
            select k, count(), _tp_delta from test30_vk_stream group by k emit changelog periodic 1s;

        - client: python
          query_type: table
          depends_on: 3000
          wait: 1
          query: |
            insert into test30_vk_stream(i, k) values (1, 'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk1')(2, 'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk1');

        - client: python
          query_type: table
          kill: 3000
          kill_wait: 3
          wait: 1
          query: |
            insert into test30_vk_stream(i, k) values (1, 'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk2');

    expected_results:
      - query_id: '3000'
        expected_results:
          - ["kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk1", 2, 1]
          - ["kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk1", 2, -1]
          - ["kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk1", 1, 1]
          - ["kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk2", 1, 1]

  - id: 2
    tags:
      - "global aggr"
      - "emit changelog"
    name: global-aggr-emit-changelog-over-changelog_kv
    description: global aggregation emit changelog query over changelog_kv
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_changelog_kv_stream;

        - client: python
          query_type: table
          exist: test30_changelog_kv_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_changelog_kv_stream (i int, k string) primary key i settings mode='changelog_kv';

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_changelog_kv_stream
          wait: 1
          query: |
            select k, count(), _tp_delta from test30_changelog_kv_stream group by k emit changelog periodic 1s;

        - client: python
          query_type: table
          depends_on: 3000
          wait: 1
          query: |
            insert into test30_changelog_kv_stream(i, k) values (1, 'k1')(2, 'k1');

        - client: python
          query_type: table
          kill: 3000
          kill_wait: 3
          wait: 1
          query: |
            insert into test30_changelog_kv_stream(i, k, _tp_delta) values (1, 'k1', -1)(1, 'k2', 1);

    expected_results:
      - query_id: '3000'
        expected_results:
          - ["k1", 2, 1]
          - ["k1", 2, -1]
          - ["k1", 1, 1]
          - ["k2", 1, 1]

  - id: 3
    tags:
      - "global aggr"
      - "emit changelog"
    name: global-aggr-emit-changelog-over-table-changelog-func
    description: global aggregation emit changelog query over changelog_kv
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_stream;

        - client: python
          query_type: table
          exist: test30_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_stream (i int, k string);

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_stream
          wait: 1
          query: |
            select k, count(), _tp_delta from changelog(test30_stream, i) group by k emit changelog periodic 1s;

        - client: python
          query_type: table
          depends_on: 3000
          wait: 1
          query: |
            insert into test30_stream(i, k) values (1, 'k1')(2, 'k1');

        - client: python
          query_type: table
          kill: 3000
          kill_wait: 3
          wait: 1
          query: |
            insert into test30_stream(i, k) values (1, 'k2');

    expected_results:
      - query_id: '3000'
        expected_results:
          - ["k1", 2, 1]
          - ["k1", 2, -1]
          - ["k1", 1, 1]
          - ["k2", 1, 1]

  - id: 4
    tags:
      - "global aggr"
      - "emit changelog"
    name: global-aggr-emit-changelog-over-global-aggr
    description: global aggregation emit changelog query over global aggregation emit changelog
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_stream;

        - client: python
          query_type: table
          exist: test30_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_stream (i int, k string);

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_stream
          wait: 1
          query: |
            select count() from (select k, count() from changelog(test30_stream, i) group by k emit changelog periodic 1s) emit periodic 1s;

        - client: python
          query_type: stream
          query_id: 3001
          depends_on_stream: test30_stream
          query: |
            select count(), _tp_delta from (select k, count() from changelog(test30_stream, i) group by k emit periodic 1s) emit changelog periodic 1s;

        - client: python
          query_type: stream
          query_id: 3002
          depends_on_stream: test30_stream
          query: |
            select count(), _tp_delta from (select k, count() from changelog(test30_stream, i) group by k emit changelog periodic 1s) emit changelog periodic 1s;

        - client: python
          query_type: table
          depends_on: 3002
          wait: 1
          query: |
            insert into test30_stream(i, k) values (1, 'k1')(2, 'k1');

        - client: python
          query_type: table
          kill: 3000,3001,3002
          kill_wait: 3
          wait: 1
          query: |
            insert into test30_stream(i, k) values (1, 'k2');

    expected_results:
      - query_id: '3000'
        expected_results:
          - [1]
          - [2]
      - query_id: '3001'
        expected_results:
          - [1, 1]
          - [1, -1]
          - [2, 1]
      - query_id: '3002'
        expected_results:
          - [1, 1]
          - [1, -1]
          - [2, 1]

  - id: 5
    tags:
      - "global aggr"
      - "emit changelog"
    name: global-aggr-emit-changelog-over-join
    description: global aggregation emit changelog query over join
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_left_stream;

        - client: python
          query_type: table
          query: |
            drop stream if exists test30_right_vk_stream;

        - client: python
          query_type: table
          exist: test30_left_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_left_stream (i int, k string);

        - client: python
          query_type: table
          exist: test30_right_vk_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_right_vk_stream (i int, k string) primary key i settings mode='versioned_kv';

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_right_vk_stream
          wait: 1
          query: |
            select i, count(), max(test30_right_vk_stream.k), _tp_delta from test30_left_stream join test30_right_vk_stream using(i) group by i emit changelog periodic 1s;

        - client: python
          query_type: stream
          query_id: 3001
          query: |
            select test30_right_vk_stream.k, count(), max(i), _tp_delta from test30_left_stream join test30_right_vk_stream using(i) group by test30_right_vk_stream.k emit changelog periodic 1s;

        - client: python
          query_type: table
          depends_on: 3001
          wait: 1
          query: |
            insert into test30_right_vk_stream(i, k) values (1, 'k1')(2, 'k2');

        - client: python
          query_type: table
          wait: 1
          query: |
            insert into test30_left_stream(i, k) values (1, 'k1');

        - client: python
          query_type: table
          wait: 1
          query: |
            insert into test30_right_vk_stream(i, k) values (1, 'kk1')(2, 'kk1');

        - client: python
          query_type: table
          kill: 3000,3001
          kill_wait: 3
          wait: 1
          query: |
            insert into test30_left_stream(i, k) values (1, 'k1')(2, 'k1');

    expected_results:
      - query_id: '3000'
        expected_results:
          - [1, 1, "k1", 1]
          - [1, 1, "k1", -1]
          - [1, 2, "kk1", 1]
          - [2, 1, "kk1", 1]

      - query_id: '3001'
        expected_results:
          - ["k1", 1, 1, 1]
          - ["kk1", 2, 2, 1]

  - id: 6
    tags:
      - "global aggr"
      - "emit changelog"
      - "query state"
    name: global-aggr-emit-changelog-over-join
    description: global aggregation emit changelog query over join
    steps:
      - statements:
        - client: python
          query_type: table
          query: |
            drop stream if exists test30_left_stream;

        - client: python
          query_type: table
          query: |
            drop stream if exists test30_right_vk_stream;

        - client: python
          query_type: table
          exist: test30_left_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_left_stream (i int, k string);

        - client: python
          query_type: table
          exist: test30_right_vk_stream
          exist_wait: 2
          wait: 1
          query: |
            create stream if not exists test30_right_vk_stream (i int, k string) primary key i settings mode='versioned_kv';

        - client: python
          query_type: stream
          query_id: 3000
          depends_on_stream: test30_right_vk_stream
          wait: 1
          query: |
            subscribe to select i, count(), max(test30_right_vk_stream.k), _tp_delta from test30_left_stream join test30_right_vk_stream using(i) group by i emit changelog periodic 1s settings checkpoint_interval=1;

        - client: python
          query_type: table
          depends_on: 3000
          wait: 1
          query: |
            insert into test30_right_vk_stream(i, k) values (1, 'k1')(2, 'k2');

        - client: python
          query_type: table
          wait: 1
          query: |
            insert into test30_left_stream(i, k) values (1, 'k1');

        - client: python
          query_type: table
          wait: 2
          query: |
            kill query where query_id = '3000' sync;

        - client: python
          query_type: stream
          query_id: 3000-1
          wait: 1
          query: |
            recover from '3000';

        - client: python
          query_type: table
          wait: 1
          query: |
            insert into test30_right_vk_stream(i, k) values (1, 'kk1')(2, 'kk1');

        - client: python
          query_type: table
          wait: 1
          query: |
            insert into test30_left_stream(i, k) values (1, 'k1')(2, 'k1');

        - client: python
          query_type: table
          wait: 3
          query: |
            unsubscribe to '3000';

    expected_results:
      - query_id: '3000'
        expected_results:
          - [1, 1, "k1", 1]

      - query_id: '3000-1'
        expected_results:
          - [1, 1, "k1", -1]
          - [1, 2, "kk1", 1]
          - [2, 1, "kk1", 1]
