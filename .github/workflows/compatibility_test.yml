name: compatibility test

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Target proton image Version'
        required: true
        default: 'latest'
      source_version:
        description: 'Source proton image Version'
        required: true
        default: ''
jobs:
  compatibility_test:
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      timeout: 30
      command: |
        export TARGET_VERSION=${{ github.event.inputs.target_version }}
        export SOURCE_VERSION=${{ github.event.inputs.source_version }}
        export PROTON_VERSION=$TARGET_VERSION
        # pull docker image
        docker pull ghcr.io/timeplus-io/proton:$PROTON_VERSION
        
        cd $GITHUB_WORKSPACE/tests/stream
        env

        # make virtualenv
        # ln -s /usr/bin/python3 /usr/bin/python
        # apt-get update
        # systemctl stop unattended-upgrades
        # apt install python3-venv -y
        # python -m venv env
        # source env/bin/activate

        # pip install --upgrade pip

        # FIXME: remove this line after pyyaml community fixed install bug
        # pip install pyyaml==5.3.1

        # FIXME(yokofly): docker 7.0.0 introduce a breaking change
        # https://github.com/docker/docker-py/issues/3194
        # pip install docker==6.1.3

        # pip install -r helpers/requirements.txt
        
        # prepare data
        if [ $SOURCE_VERSION == '' ]; then
            # python ci_runner.py --settings=redp,nativelog --test_folders=test_compatibility/prepare_data
            docker-compose -f test_stream_smoke/configs/docker-compose.yaml up -d
            docker exec -it proton-server proton client -nm -q "create stream example(x int);"
            docker exec -it proton-server proton client -nm -q "insert into example (x) values (1)(2)(3);"
            docker-compose -f test_stream_smoke/configs/docker-compose.yaml down
        else
            aws s3 cp --no-progress s3://tp-internal/proton/compatibility_data.$SOURCE_VERSION.tar.gz .
            tar -zxvf compatibility_data.$SOURCE_VERSION.tar.gz
        fi
        
        # run test
        # python ci_runner.py --settings=redp,nativelog --test_folders=test_compatibility/test_queries
        docker-compose -f test_stream_smoke/configs/docker-compose.yaml up -d
        docker exec -it proton-server proton client -nm -q "select * from example where _tp_time > earliest_ts() limit 3;"
        docker-compose -f test_stream_smoke/configs/docker-compose.yaml down
        
        # echo "check test result"
        # cat $GITHUB_WORKSPACE/tests/stream/.status
        # cat $GITHUB_WORKSPACE/tests/stream/.status | grep nativelog:ExitCode.OK | grep redp:ExitCode.OK
        
        # tar and upload data
        if [ $SOURCE_VERSION == '' ]; then
          tar -zcvf compatibility_data.$PROTON_VERSION.tar.gz `ls -d proton-*`
          aws s3 cp --no-progress compatibility_data.$PROTON_VERSION.tar.gz s3://tp-internal/proton/
        fi
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
