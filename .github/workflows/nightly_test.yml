name: NightlyTest

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
  schedule:
    # *     *     *     *     *
    # ┬     ┬     ┬     ┬     ┬
    # │     │     │     │     │
    # │     │     │     │     │
    # │     │     │     │     └───── day of the week (0 - 6) (0 is Sunday, or use names)
    # │     │     │     └────────── month (1 - 12)
    # │     │     └─────────────── day of the month (1 - 31)
    # │     └──────────────────── hour (0 - 23)
    # └───────────────────────── minute (0 - 59)
    # build at 00:30(UTC) on every day
    - cron:  '00 23 * * 0,1,2,3,4,6'
    - cron:  '00 23 * * 5'

jobs:
  prepare_sanitizer_build:
    runs-on: ubuntu-latest
    if: github.event.schedule == '00 23 * * 5' && github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE

            git config user.name "proton-robot"
            git config user.email "proton_robot@timeplus.io"

            mkdir $GITHUB_WORKSPACE/ccache
            echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

            ./docker/packager/packager --package-type binary --docker-image-version clang-16 ${SANITIZER:+--sanitizer} $SANITIZER --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output

            if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
              echo "Compiling proton Failed"
              exit 127
            fi

            # Don't need to upload ccache to S3 at the moment
            tar -zcf ./cache${SANITIZER:+_}$SANITIZER${ARCH:+_}$ARCH.tar.gz -C $GITHUB_WORKSPACE/ccache .
            # aws s3 cp --no-progress ./cache${SANITIZER:+_}$SANITIZER${ARCH:+_}$ARCH.tar.gz s3://tp-internal/proton/ci_cache/

            # clean ccache and build footprint
            rm -rf $GITHUB_WORKSPACE/ccache
            rm ./cache${SANITIZER:+_}$SANITIZER${ARCH:+_}$ARCH.tar.gz
            rm -rf build_docker

            # build unit test docker image
            cp $GITHUB_WORKSPACE/output/unit_tests_dbms $GITHUB_WORKSPACE/docker/test/proton_unit_test/
            cd $GITHUB_WORKSPACE/docker/test/proton_unit_test/
            docker build . -t ghcr.io/timeplus-io/proton-unit-test:testing-$SANITIZER-$ARCH-$GITHUB_SHA
            docker push ghcr.io/timeplus-io/proton-unit-test:testing-$SANITIZER-$ARCH-$GITHUB_SHA

            docker run --name static-server -p 8080:80 -v $GITHUB_WORKSPACE/output:/usr/share/nginx/html:ro -d nginx
            cd $GITHUB_WORKSPACE/docker/server

            docker build . --network host --build-arg single_binary_location_url=http://localhost:8080/proton -t ghcr.io/timeplus-io/proton:testing-$SANITIZER-$ARCH-$GITHUB_SHA
            docker push ghcr.io/timeplus-io/proton:testing-$SANITIZER-$ARCH-$GITHUB_SHA
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_sanitizer_unit_test:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/proton_ci
            export PROTON_VERSION=testing-$SANITIZER-$ARCH-$GITHUB_SHA

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install -r requirements.txt
            python unit_tests_check.py
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_sanitizer_smoke_test:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/stream
            export PROTON_VERSION=testing-$SANITIZER-$ARCH-$GITHUB_SHA

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install --upgrade pip

            # FIXME: remove this line after pyyaml community fixed install bug
            pip install pyyaml==5.3.1

            # FIXME(yokofly): docker 7.0.0 introduce a breaking change
            # https://github.com/docker/docker-py/issues/3194
            pip install docker==6.1.3

            pip install -r helpers/requirements.txt
            python ci_runner.py --debug --settings=redp,nativelog

            cat $GITHUB_WORKSPACE/tests/stream/.status
            cat $GITHUB_WORKSPACE/tests/stream/.status | grep nativelog:ExitCode.OK | grep redp:ExitCode.OK
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_sanitizer_stateless_test:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/proton_ci

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install -r requirements.txt
            export PROTON_VERSION=testing-$SANITIZER-$ARCH-$GITHUB_SHA
            python functional_tests_check.py stateless
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_sanitizer_stateful_test:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/proton_ci

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install -r requirements.txt
            export PROTON_VERSION=testing-$SANITIZER-$ARCH-$GITHUB_SHA
            python functional_tests_check.py stateful
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_release_build:
    runs-on: ubuntu-latest
    if: github.event.schedule == '00 23 * * 5' && github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE

            git config user.name "proton-robot"
            git config user.email "proton_robot@timeplus.io"

            mkdir $GITHUB_WORKSPACE/ccache
            echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

            ./docker/packager/packager --package-type binary --docker-image-version clang-16 --build-type release --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output

            if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
              echo "Compiling proton Failed"
              exit 127
            fi

            # Don't need to upload ccache to S3 at the moment
            tar -zcf ./cache${ARCH:+_}$ARCH.tar.gz -C $GITHUB_WORKSPACE/ccache .
            # aws s3 cp --no-progress ./cache${ARCH:+_}$ARCH.tar.gz s3://tp-internal/proton/ci_cache/

            # clean ccache and build footprint
            rm -rf $GITHUB_WORKSPACE/ccache
            rm ./cache${ARCH:+_}$ARCH.tar.gz
            rm -rf build_docker

            docker run --name static-server -p 8080:80 -v $GITHUB_WORKSPACE/output:/usr/share/nginx/html:ro -d nginx
            cd $GITHUB_WORKSPACE/docker/server

            docker build . --network host --build-arg single_binary_location_url=http://localhost:8080/proton -t ghcr.io/timeplus-io/proton:testing-$ARCH-$GITHUB_SHA
            docker push ghcr.io/timeplus-io/proton:testing-$ARCH-$GITHUB_SHA
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_release_smoke_test:
    runs-on: ubuntu-latest
    if: github.event.schedule == '00 23 * * 5' && github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/stream
            export PROTON_VERSION=testing-$ARCH-$GITHUB_SHA

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install --upgrade pip

            # FIXME: remove this line after pyyaml community fixed install bug
            pip install pyyaml==5.3.1

            # FIXME(yokofly): docker 7.0.0 introduce a breaking change
            # https://github.com/docker/docker-py/issues/3194
            pip install docker==6.1.3

            pip install -r helpers/requirements.txt
            python ci_runner.py --debug --settings=redp,nativelog

            cat $GITHUB_WORKSPACE/tests/stream/.status
            cat $GITHUB_WORKSPACE/tests/stream/.status | grep nativelog:ExitCode.OK | grep redp:ExitCode.OK
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_release_stateless_test:
    runs-on: ubuntu-latest
    if: github.event.schedule == '00 23 * * 5' && github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/proton_ci

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install -r requirements.txt
            export PROTON_VERSION=testing-$ARCH-$GITHUB_SHA
            python functional_tests_check.py stateless
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_release_stateful_test:
    runs-on: ubuntu-latest
    if: github.event.schedule == '00 23 * * 5' && github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE/tests/proton_ci

            # make virtualenv
            ln -s /usr/bin/python3 /usr/bin/python
            apt-get update
            systemctl stop unattended-upgrades
            apt install python3-venv -y
            python -m venv env
            source env/bin/activate

            pip install -r requirements.txt
            export PROTON_VERSION=testing-$ARCH-$GITHUB_SHA
            python functional_tests_check.py stateful
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_address_build:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
            cd $GITHUB_WORKSPACE

            git config user.name "proton-robot"
            git config user.email "proton_robot@timeplus.io"

            mkdir $GITHUB_WORKSPACE/ccache
            echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

            ./docker/packager/packager --package-type binary --docker-image-version clang-16 ${SANITIZER:+--sanitizer} $SANITIZER --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output

            if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
              echo "Compiling proton Failed"
              exit 127
            fi

            tar -zcf ./cache${SANITIZER:+_}$SANITIZER${ARCH:+_}$ARCH.tar.gz -C $GITHUB_WORKSPACE/ccache .
            aws s3 cp --no-progress ./cache${SANITIZER:+_}$SANITIZER${ARCH:+_}$ARCH.tar.gz s3://tp-internal/proton/ci_cache/

            # clean ccache and build footprint
            rm -rf $GITHUB_WORKSPACE/ccache
            rm ./cache${SANITIZER:+_}$SANITIZER${ARCH:+_}$ARCH.tar.gz
            rm -rf build_docker

            # build unit test docker image
            cp $GITHUB_WORKSPACE/output/unit_tests_dbms $GITHUB_WORKSPACE/docker/test/proton_unit_test/
            cd $GITHUB_WORKSPACE/docker/test/proton_unit_test/
            docker build . -t ghcr.io/timeplus-io/proton-unit-test:testing-$SANITIZER-$ARCH-$GITHUB_SHA
            docker push ghcr.io/timeplus-io/proton-unit-test:testing-$SANITIZER-$ARCH-$GITHUB_SHA

            docker run --name static-server -p 8080:80 -v $GITHUB_WORKSPACE/output:/usr/share/nginx/html:ro -d nginx
            cd $GITHUB_WORKSPACE/docker/server

            docker build . --network host --build-arg single_binary_location_url=http://localhost:8080/proton -t ghcr.io/timeplus-io/proton:testing-$SANITIZER-$ARCH-$GITHUB_SHA
            docker push ghcr.io/timeplus-io/proton:testing-$SANITIZER-$ARCH-$GITHUB_SHA
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_sanitizer_clean_up:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
          bash tests/ci/worker/sanitizer_clean_up.sh
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  prepare_release_clean_up:
    runs-on: ubuntu-latest
    if: github.repository == 'timeplus-io/proton'
    outputs:
      command: |
          bash tests/ci/worker/release_clean_up.sh
    steps:
      - name: display command
        run: |
          echo 'command: ${{ steps.set_command.outputs.command }}'
  build_address_x64:
    needs: prepare_address_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "address"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_address_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_address_x64:
    needs: [prepare_sanitizer_unit_test, build_address_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_address_x64:
    needs: [prepare_sanitizer_smoke_test, build_address_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_address_x64:
    needs: [prepare_sanitizer_stateless_test, build_address_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_address_x64:
    needs: [prepare_sanitizer_stateful_test, build_address_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_thread_x64:
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "thread"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_thread_x64:
    needs: [prepare_sanitizer_unit_test, build_thread_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_thread_x64:
    needs: [prepare_sanitizer_smoke_test, build_thread_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_thread_x64:
    needs: [prepare_sanitizer_stateless_test, build_thread_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_thread_x64:
    needs: [prepare_sanitizer_stateful_test, build_thread_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_memory_x64:
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "memory"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_memory_x64:
    needs: [prepare_sanitizer_unit_test, build_memory_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_memory_x64:
    needs: [prepare_sanitizer_smoke_test, build_memory_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_memory_x64:
    needs: [prepare_sanitizer_stateless_test, build_memory_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_memory_x64:
    needs: [prepare_sanitizer_stateful_test, build_memory_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_undefined_x64:
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "undefined"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_undefined_x64:
    needs: [prepare_sanitizer_unit_test, build_undefined_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_undefined_x64:
    needs: [prepare_sanitizer_smoke_test, build_undefined_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_undefined_x64:
    needs: [prepare_sanitizer_stateless_test, build_undefined_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_undefined_x64:
    needs: [prepare_sanitizer_stateful_test, build_undefined_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.X64_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_release_x64:
    needs: prepare_release_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: ""
      arch: ${{ vars.X64_ARCH }}
      tag: 'release'
      command: |
        ${{ needs.prepare_release_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_release_x64:
    needs: [prepare_release_smoke_test, build_release_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: ""
      arch: ${{ vars.X64_ARCH }}
      tag: 'release'
      timeout: 30
      command: |
        ${{ needs.prepare_release_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_release_x64:
    needs: [prepare_release_stateless_test, build_release_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: ""
      arch: ${{ vars.X64_ARCH }}
      tag: 'release'
      timeout: 30
      command: |
        ${{ needs.prepare_release_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_release_x64:
    needs: [prepare_release_stateful_test, build_release_x64]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: ""
      arch: ${{ vars.X64_ARCH }}
      tag: 'release'
      timeout: 30
      command: |
        ${{ needs.prepare_release_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_address_arm:
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "address"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_address_arm:
    needs: [prepare_sanitizer_unit_test, build_address_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_address_arm:
    needs: [prepare_sanitizer_smoke_test, build_address_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_address_arm:
    needs: [prepare_sanitizer_stateless_test, build_address_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_address_arm:
    needs: [prepare_sanitizer_stateful_test, build_address_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "address"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_thread_arm:
    # temporarily disable tsan on arm due to ASLR stall
    if: false
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "thread"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_thread_arm:
    needs: [prepare_sanitizer_unit_test, build_thread_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_thread_arm:
    needs: [prepare_sanitizer_smoke_test, build_thread_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_thread_arm:
    needs: [prepare_sanitizer_stateless_test, build_thread_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_thread_arm:
    needs: [prepare_sanitizer_stateful_test, build_thread_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "thread"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_memory_arm:
    # temporarily disable msan on arm due to ASLR stall
    if: false
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "memory"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_memory_arm:
    needs: [prepare_sanitizer_unit_test, build_memory_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_memory_arm:
    needs: [prepare_sanitizer_smoke_test, build_memory_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_memory_arm:
    needs: [prepare_sanitizer_stateless_test, build_memory_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_memory_arm:
    needs: [prepare_sanitizer_stateful_test, build_memory_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "memory"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_undefined_arm:
    needs: prepare_sanitizer_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: "undefined"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      command: |
        ${{ needs.prepare_sanitizer_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  unit_test_undefined_arm:
    needs: [prepare_sanitizer_unit_test, build_undefined_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '30'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_unit_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_undefined_arm:
    needs: [prepare_sanitizer_smoke_test, build_undefined_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_undefined_arm:
    needs: [prepare_sanitizer_stateless_test, build_undefined_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_undefined_arm:
    needs: [prepare_sanitizer_stateful_test, build_undefined_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: "undefined"
      arch: ${{ vars.ARM_ARCH }}
      tag: 'sanitizer'
      timeout: 30
      command: |
        ${{ needs.prepare_sanitizer_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  build_release_arm:
    needs: prepare_release_build
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      sanitizer: ""
      arch: ${{ vars.ARM_ARCH }}
      tag: 'release'
      command: |
        ${{ needs.prepare_release_build.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  smoke_test_release_arm:
    needs: [prepare_release_smoke_test, build_release_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '60'
      submodules: false
      sanitizer: ""
      arch: ${{ vars.ARM_ARCH }}
      tag: 'release'
      timeout: 30
      command: |
        ${{ needs.prepare_release_smoke_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateless_test_release_arm:
    needs: [prepare_release_stateless_test, build_release_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: ""
      arch: ${{ vars.ARM_ARCH }}
      tag: 'release'
      timeout: 30
      command: |
        ${{ needs.prepare_release_stateless_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  stateful_test_release_arm:
    needs: [prepare_release_stateful_test, build_release_arm]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_TEST_AMI }}
      ec2-volume-size: '40'
      submodules: false
      sanitizer: ""
      arch: ${{ vars.ARM_ARCH }}
      tag: 'release'
      timeout: 30
      command: |
        ${{ needs.prepare_release_stateful_test.outputs.command }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TIMEPLUS_ADDRESS: ${{ secrets.TIMEPLUS_ADDRESS }}
      TIMEPLUS_API_KEY: ${{ secrets.TIMEPLUS_API_KEY }}
      TIMEPLUS_WORKSPACE: ${{ secrets.TIMEPLUS_WORKSPACE }}
  clean_passed_test_image_address_x64:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_address_x64
      - smoke_test_address_x64
      - stateless_test_address_x64
      - stateful_test_address_x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "address"
          ARCH: ${{ vars.X64_ARCH }}
  clean_passed_test_image_thread_x64:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_thread_x64
      - smoke_test_thread_x64
      - stateless_test_thread_x64
      - stateful_test_thread_x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "thread"
          ARCH: ${{ vars.X64_ARCH }}
  clean_passed_test_image_memory_x64:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_memory_x64
      - smoke_test_memory_x64
      - stateless_test_memory_x64
      - stateful_test_memory_x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "memory"
          ARCH: ${{ vars.X64_ARCH }}
  clean_passed_test_image_undefined_x64:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_undefined_x64
      - smoke_test_undefined_x64
      - stateless_test_undefined_x64
      - stateful_test_undefined_x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "undefined"
          ARCH: ${{ vars.X64_ARCH }}
  clean_passed_test_image_release_x64:
    needs:
      - prepare_release_clean_up
      - smoke_test_release_x64
      - stateless_test_release_x64
      - stateful_test_release_x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_release_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ARCH: ${{ vars.X64_ARCH }}
  clean_passed_test_image_address_arm:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_address_arm
      - smoke_test_address_arm
      - stateless_test_address_arm
      - stateful_test_address_arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "address"
          ARCH: ${{ vars.ARM_ARCH }}
  clean_passed_test_image_thread_arm:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_thread_arm
      - smoke_test_thread_arm
      - stateless_test_thread_arm
      - stateful_test_thread_arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "thread"
          ARCH: ${{ vars.ARM_ARCH }}
  clean_passed_test_image_memory_arm:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_memory_arm
      - smoke_test_memory_arm
      - stateless_test_memory_arm
      - stateful_test_memory_arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "memory"
          ARCH: ${{ vars.ARM_ARCH }}
  clean_passed_test_image_undefined_arm:
    needs:
      - prepare_sanitizer_clean_up
      - unit_test_undefined_arm
      - smoke_test_undefined_arm
      - stateless_test_undefined_arm
      - stateful_test_undefined_arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_sanitizer_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SANITIZER: "undefined"
          ARCH: ${{ vars.ARM_ARCH }}
  clean_passed_test_image_release_arm:
    needs:
      - prepare_release_clean_up
      - smoke_test_release_arm
      - stateless_test_release_arm
      - stateful_test_release_arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: delete testing image
        run: |
          ${{ needs.prepare_release_clean_up.outputs.command }}
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ARCH: ${{ vars.ARM_ARCH }}

