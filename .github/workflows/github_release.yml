name: github_release

on: # yamllint disable-line rule:truthy
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: create a new release
        run: |
          # git login
          gh auth login
          gh auth status

          # get proton tag
          PROTON_TAG=$(git describe --abbrev=0)

          # create a new release
          gh release create $PROTON_TAG --generate-notes -d
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  build_linux_x86_64:
    needs: [ create_release ]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      run_mode: 'start' # start ec2 on demand instance
      command: |
        cd $GITHUB_WORKSPACE

        # git config
        git config user.name "proton-robot"
        git config user.email "proton_robot@timeplus.io"

        # prepare build cache
        mkdir $GITHUB_WORKSPACE/ccache
        echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

        # compiling
        ./docker/packager/packager --package-type binary --docker-image-version clang-16 --build-type release --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output --compiler clang-16

        if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
          echo "Compiling proton Failed"
          exit 127
        fi

        # upload binaries of v8
        tar -zcf ./v8-cmake-x64.tar.gz -C $GITHUB_WORKSPACE/build_docker/contrib/v8-cmake/ bytecode_builtins_list_generator mksnapshot torque
        aws s3 cp --no-progress ./v8-cmake-x64.tar.gz s3://tp-internal/proton/

        # clean ccache and build footprint
        rm -rf $GITHUB_WORKSPACE/ccache
        rm -rf $GITHUB_WORKSPACE/build_docker

        # get proton tag
        PROTON_TAG=$(git describe --abbrev=0)
        echo "Proton tag: $PROTON_TAG"

        PROTON_BINARY=proton-$PROTON_TAG-Linux-x86_64
        echo "Proton Binary Name: $PROTON_BINARY"

        mv $GITHUB_WORKSPACE/output/proton $GITHUB_WORKSPACE/output/$PROTON_BINARY

        # git login
        export GH_TOKEN=$GH_PERSONAL_ACCESS_TOKEN
        gh auth login
        gh auth status

        # upload binary of proton
        gh release upload $PROTON_TAG $GITHUB_WORKSPACE/output/$PROTON_BINARY --clobber

    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  build_linux_arm64:
    needs: [ create_release ]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      run_mode: 'start' # start ec2 on demand instance
      command: |
        cd $GITHUB_WORKSPACE

        # git config
        git config user.name "proton-robot"
        git config user.email "proton_robot@timeplus.io"

        # prepare build cache
        mkdir $GITHUB_WORKSPACE/ccache
        echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

        # compiling
        ./docker/packager/packager --package-type binary --docker-image-version clang-16 --build-type release --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output --compiler clang-16-aarch64
        if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
          echo "Compiling proton Failed"
          exit 127
        fi

        # upload binaries of v8
        tar -zcf ./v8-cmake-arm64.tar.gz -C $GITHUB_WORKSPACE/build_docker/contrib/v8-cmake/ bytecode_builtins_list_generator mksnapshot torque
        aws s3 cp --no-progress ./v8-cmake-arm64.tar.gz s3://tp-internal/proton/

        # clean ccache and build footprint
        rm -rf $GITHUB_WORKSPACE/ccache
        rm -rf $GITHUB_WORKSPACE/build_docker

        # get proton tag
        PROTON_TAG=$(git describe --abbrev=0)
        echo "Proton tag: $PROTON_TAG"

        PROTON_BINARY=proton-$PROTON_TAG-Linux-aarch64
        echo "Proton Binary Name: $PROTON_BINARY"

        mv $GITHUB_WORKSPACE/output/proton $GITHUB_WORKSPACE/output/$PROTON_BINARY

        # git login
        export GH_TOKEN=$GH_PERSONAL_ACCESS_TOKEN
        gh auth login
        gh auth status

        # upload binary of proton
        gh release upload $PROTON_TAG $GITHUB_WORKSPACE/output/$PROTON_BINARY --clobber

    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  build_darwin_x86_64:
    needs: [ create_release, build_linux_x86_64 ]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.X64_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.X64_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      run_mode: 'start' # start ec2 on demand instance
      command: |
        cd $GITHUB_WORKSPACE

        # git config
        git config user.name "proton-robot"
        git config user.email "proton_robot@timeplus.io"

        # download binary of v8
        aws s3 cp --no-progress s3://tp-internal/proton/v8-cmake-x64.tar.gz $GITHUB_WORKSPACE/contrib/v8-cmake/
        tar -zxf $GITHUB_WORKSPACE/contrib/v8-cmake/v8-cmake-x64.tar.gz -C $GITHUB_WORKSPACE/contrib/v8-cmake/
        rm $GITHUB_WORKSPACE/contrib/v8-cmake/v8-cmake-x64.tar.gz

        # prepare build cache
        mkdir $GITHUB_WORKSPACE/ccache
        echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

        # compiling
        ./docker/packager/packager --package-type binary --docker-image-version clang-16 --build-type release --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output --compiler clang-16-darwin

        if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
          echo "Compiling proton Failed"
          exit 127
        fi

        # clean ccache and build footprint
        rm -rf $GITHUB_WORKSPACE/ccache
        rm -rf $GITHUB_WORKSPACE/build_docker

        # get proton tag
        PROTON_TAG=$(git describe --abbrev=0)
        echo "Proton tag: $PROTON_TAG"

        PROTON_BINARY=proton-$PROTON_TAG-Darwin-x86_64
        echo "Proton Binary Name: $PROTON_BINARY"

        mv $GITHUB_WORKSPACE/output/proton $GITHUB_WORKSPACE/output/$PROTON_BINARY

        # git login
        export GH_TOKEN=$GH_PERSONAL_ACCESS_TOKEN
        gh auth login
        gh auth status

        # upload binary of proton
        gh release upload $PROTON_TAG $GITHUB_WORKSPACE/output/$PROTON_BINARY --clobber

    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  build_darwin_arm64:
    needs: [ create_release, build_linux_arm64 ]
    uses: timeplus-io/proton/.github/workflows/run_command.yml@develop
    with:
      ec2-instance-type: ${{ vars.ARM_INSTANCE_TYPE }}
      ec2-image-id: ${{ vars.ARM_AMI }}
      ec2-volume-size: ${{ vars.VOLUME_SIZE }}
      submodules: 'recursive'
      run_mode: 'start' # start ec2 on demand instance
      command: |
        cd $GITHUB_WORKSPACE

        # git config
        git config user.name "proton-robot"
        git config user.email "proton_robot@timeplus.io"

        # download binary of v8
        aws s3 cp --no-progress s3://tp-internal/proton/v8-cmake-arm64.tar.gz $GITHUB_WORKSPACE/contrib/v8-cmake/
        tar -zxf $GITHUB_WORKSPACE/contrib/v8-cmake/v8-cmake-arm64.tar.gz -C $GITHUB_WORKSPACE/contrib/v8-cmake/
        rm $GITHUB_WORKSPACE/contrib/v8-cmake/v8-cmake-arm64.tar.gz

        # prepare build cache
        mkdir $GITHUB_WORKSPACE/ccache
        echo "max_size = 100.0G" > $GITHUB_WORKSPACE/ccache/ccache.conf

        # compiling
        ./docker/packager/packager --package-type binary --docker-image-version clang-16 --build-type release --proton-build --enable-proton-local --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output --compiler clang-16-darwin-aarch64
        if [ ! -f "$GITHUB_WORKSPACE/output/proton" ]; then
          echo "Compiling proton Failed"
          exit 127
        fi

        # clean ccache and build footprint
        rm -rf $GITHUB_WORKSPACE/ccache
        rm -rf $GITHUB_WORKSPACE/build_docker

        # get proton tag
        PROTON_TAG=$(git describe --abbrev=0)
        echo "Proton tag: $PROTON_TAG"

        PROTON_BINARY=proton-$PROTON_TAG-Darwin-arm64
        echo "Proton Binary Name: $PROTON_BINARY"

        mv $GITHUB_WORKSPACE/output/proton $GITHUB_WORKSPACE/output/$PROTON_BINARY

        # git login
        export GH_TOKEN=$GH_PERSONAL_ACCESS_TOKEN
        gh auth login
        gh auth status

        # upload binary of proton
        gh release upload $PROTON_TAG $GITHUB_WORKSPACE/output/$PROTON_BINARY --clobber

    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
