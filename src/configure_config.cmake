if (TARGET ch_contrib::rocksdb)
    set(USE_ROCKSDB 1)
endif()
if (TARGET ch_contrib::bzip2)
    set(USE_BZIP2 1)
endif()
if (TARGET ch_contrib::snappy)
    set(USE_SNAPPY 1)
endif()
if (TARGET ch_contrib::brotli)
    set(USE_BROTLI 1)
endif()
if (TARGET ch_contrib::hivemetastore)
    set(USE_HIVE 1)
endif()
if (TARGET ch_contrib::rdkafka)
    set(USE_RDKAFKA 1)
endif()
if (TARGET OpenSSL::SSL)
    set(USE_SSL 1)
endif()
if (TARGET ch_contrib::ldap)
    set(USE_LDAP 1)
endif()
if (TARGET ch_contrib::grpc)
    set(USE_GRPC 1)
endif()
if (TARGET ch_contrib::nuraft)
    set(USE_NURAFT 1)
endif()
if (TARGET ch_contrib::icu)
    set(USE_ICU 1)
endif()
if (TARGET ch_contrib::simdjson)
    set(USE_SIMDJSON 1)
endif()
if (TARGET ch_contrib::rapidjson)
    set(USE_RAPIDJSON 1)
endif()
if (TARGET ch_contrib::azure_sdk)
    set(USE_AZURE_BLOB_STORAGE 1)
endif()
if (TARGET ch_contrib::base64)
    set(USE_BASE64 1)
endif()
if (TARGET ch_contrib::yaml_cpp)
    set(USE_YAML_CPP 1)
endif()
if (OS_LINUX)
    set(USE_FILELOG 1)
endif()
if (TARGET ch_contrib::libpqxx)
    set(USE_LIBPQXX 1)
endif()
if (TARGET ch_contrib::krb5)
    set(USE_KRB5 1)
endif()
if (TARGET ch_contrib::sentry)
    set(USE_SENTRY 1)
endif()
if (TARGET ch_contrib::datasketches)
    set(USE_DATASKETCHES 1)
endif()
if (TARGET ch_contrib::aws_s3)
    set(USE_AWS_S3 1)
endif()
if (ENABLE_NLP)
    set(USE_NLP 1)
endif()
if (TARGET ch_contrib::llvm)
    set(USE_EMBEDDED_COMPILER 1)
endif()
if (TARGET ch_contrib::unixodbc)
    set(USE_ODBC 1)
endif()
if (TARGET ch_contrib::replxx)
    set(USE_REPLXX 1)
endif()
if (TARGET ch_contrib::cpuid)
    set(USE_CPUID 1)
endif()
if (TARGET ch_contrib::jemalloc)
    set(USE_JEMALLOC 1)
endif()
if (TARGET ch_contrib::gwp_asan)
    set(USE_GWP_ASAN 1)
endif()
if (TARGET ch_contrib::h3)
    set(USE_H3 1)
endif()
if (TARGET ch_contrib::s2)
    set(USE_S2_GEOMETRY 1)
endif()
if (TARGET ch_contrib::fastops)
    set(USE_FASTOPS 1)
endif()
if (TARGET ch_contrib::vectorscan)
    set(USE_VECTORSCAN 1)
endif()
if (TARGET ch_contrib::avrocpp)
    set(USE_AVRO 1)
endif()
if (TARGET ch_contrib::parquet)
    set(USE_PARQUET 1)
    set(USE_ARROW 1)
    set(USE_ORC 1)
endif()
if (TARGET ch_contrib::liburing)
    set(USE_LIBURING 1)
endif ()
if (TARGET ch_contrib::protobuf)
    set(USE_PROTOBUF 1)
endif()
if (TARGET ch_contrib::msgpack)
    set(USE_MSGPACK 1)
endif()
if (TARGET ch_contrib::capnp)
    set(USE_CAPNP 1)
endif()
if (NOT (ENABLE_OPENSSL OR ENABLE_OPENSSL_DYNAMIC))
    set(USE_BORINGSSL 1)
endif ()
if (ENABLE_OPENSSL)
    set(USE_OPENSSL_INTREE 1)
endif ()
# Enable / disable aggregation functions

# Enable / disable functions

option(ENABLE_BITMAP_FUNCS "Enable bitmap functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_BITMAP_FUNCS)
    set(USE_BITMAP_FUNCS 1)
endif()

option(ENABLE_BINARY_REPR_FUNCS "Enable binary repr functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_BINARY_REPR_FUNCS)
    set(USE_BINARY_REPR_FUNCS 1)
endif()

option(ENABLE_IP_CODING_FUNCS "Enable IP functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_IP_CODING_FUNCS)
    set(USE_IP_CODING_FUNCS 1)
endif()

option(ENABLE_UUID_CODING_FUNCS "Enable UUID functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_UUID_CODING_FUNCS)
    set(USE_UUID_CODING_FUNCS 1)
endif()

option(ENABLE_EXTERNAL_DICT_FUNCS "Enable external dictionary functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_EXTERNAL_DICT_FUNCS)
    set(USE_EXTERNAL_DICT_FUNCS 1)
endif()

option(ENABLE_EXTERNAL_MODELS_FUNCS "Enable external models functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_EXTERNAL_MODELS_FUNCS)
    set(USE_EXTERNAL_MODELS_FUNCS 1)
endif()

option(ENABLE_FORMATTING_FUNCS "Enable formatting functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_FORMATTING_FUNCS)
    set(USE_FORMATTING_FUNCS 1)
endif()

option(ENABLE_HASH_FUNCS "Enable hash functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_HASH_FUNCS)
    set(USE_HASH_FUNCS 1)
endif()

option(ENABLE_HIGH_ORDER_ARRAY_FUNCS "Enable high order array functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_HIGH_ORDER_ARRAY_FUNCS)
    set(USE_HIGH_ORDER_ARRAY_FUNCS 1)
endif()

option(ENABLE_URL_FUNCS "Enable high order array functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_URL_FUNCS)
    set(USE_URL_FUNCS 1)
endif()

option(ENABLE_GEO_FUNCS "Enable geo functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_GEO_FUNCS)
    set(USE_GEO_FUNCS 1)
endif()

option(ENABLE_H3_GEO_FUNCS "Enable h3 geo functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_H3_GEO_FUNCS)
    set(USE_H3_GEO_FUNCS 1)
endif()

option(ENABLE_S2_GEO_FUNCS "Enable s2 geo functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_S2_GEO_FUNCS)
    set(USE_S2_GEO_FUNCS 1)
endif()

option(ENABLE_MISC_FUNCS "Enable misc functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_MISC_FUNCS)
    set(USE_MISC_FUNCS 1)
endif()

option(ENABLE_MATH_FUNCS "Enable math functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_MATH_FUNCS)
    set(USE_MATH_FUNCS 1)
endif()

option(ENABLE_INTROSPECTION_FUNCS "Enable introspection functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_INTROSPECTION_FUNCS)
    set(USE_INTROSPECTION_FUNCS 1)
endif()

option(ENABLE_CONSISTENT_HASH_FUNCS "Enable consistent hashing functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_CONSISTENT_HASH_FUNCS)
    set(USE_CONSISTENT_HASH_FUNCS 1)
endif()

option(ENABLE_HAMMING_DISTANCE_FUNCS "Enable hamming distance functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_HAMMING_DISTANCE_FUNCS)
    set(USE_HAMMING_DISTANCE_FUNCS 1)
endif()

option(ENABLE_SNOWFLAKE_FUNCS "Enable Snowflake functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_SNOWFLAKE_FUNCS)
    set(USE_SNOWFLAKE_FUNCS 1)
endif()

option(USE_ENCRYPT_DECRYPT_FUNCS "Enable encrypt/decrypt functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_ENCRYPT_DECRYPT_FUNCS)
    set(USE_ENCRYPT_DECRYPT_FUNCS 1)
endif()

option(ENABLE_DEBUG_FUNCS "Enable debug functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_DEBUG_FUNCS)
    set(USE_DEBUG_FUNCS 1)
endif()

if (ENABLE_ALL_FUNCS AND NOT SANITIZE)
    option(ENABLE_ARG_MIN_MAX_FUNCS "Enable arg_min/arg_max functions" ON)
else()
    option(ENABLE_ARG_MIN_MAX_FUNCS "Enable arg_min/arg_max functions" OFF)
endif()

if (ENABLE_ARG_MIN_MAX_FUNCS)
    set(USE_ARG_MIN_MAX_FUNCS 1)
endif()

option(ENABLE_BASE64_FUNCS "Enable base64 functions" ${ENABLE_ALL_FUNCS})
if (ENABLE_BASE64_FUNCS)
    set(USE_BASE64 1)
endif()

